
FreeRTOS_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d4c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002f1c  08002f1c  00012f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f84  08002f84  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002f84  08002f84  00012f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f8c  08002f8c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f8c  08002f8c  00012f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f90  08002f90  00012f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003fd0  20000010  08002fa4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003fe0  08002fa4  00023fe0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d75  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ffe  00000000  00000000  00029db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0002bdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000858  00000000  00000000  0002c718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021cde  00000000  00000000  0002cf70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b31c  00000000  00000000  0004ec4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf5eb  00000000  00000000  00059f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00129555  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023e4  00000000  00000000  001295a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002f04 	.word	0x08002f04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08002f04 	.word	0x08002f04

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b094      	sub	sp, #80	; 0x50
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 031c 	add.w	r3, r7, #28
 800051e:	2234      	movs	r2, #52	; 0x34
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f002 fce6 	bl	8002ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 0308 	add.w	r3, r7, #8
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	4b2a      	ldr	r3, [pc, #168]	; (80005e8 <SystemClock_Config+0xd4>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	4a29      	ldr	r2, [pc, #164]	; (80005e8 <SystemClock_Config+0xd4>)
 8000542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000546:	6413      	str	r3, [r2, #64]	; 0x40
 8000548:	4b27      	ldr	r3, [pc, #156]	; (80005e8 <SystemClock_Config+0xd4>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000554:	2300      	movs	r3, #0
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	4b24      	ldr	r3, [pc, #144]	; (80005ec <SystemClock_Config+0xd8>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000560:	4a22      	ldr	r2, [pc, #136]	; (80005ec <SystemClock_Config+0xd8>)
 8000562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b20      	ldr	r3, [pc, #128]	; (80005ec <SystemClock_Config+0xd8>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000570:	603b      	str	r3, [r7, #0]
 8000572:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	2301      	movs	r3, #1
 800057a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057c:	2310      	movs	r3, #16
 800057e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000580:	2302      	movs	r3, #2
 8000582:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000584:	2300      	movs	r3, #0
 8000586:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000588:	2310      	movs	r3, #16
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800058c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000590:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000592:	2304      	movs	r3, #4
 8000594:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000596:	2302      	movs	r3, #2
 8000598:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800059a:	2302      	movs	r3, #2
 800059c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 ff7c 	bl	80014a0 <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005ae:	f000 f90d 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2302      	movs	r3, #2
 80005b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	2102      	movs	r1, #2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fc50 	bl	8000e74 <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005da:	f000 f8f7 	bl	80007cc <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3750      	adds	r7, #80	; 0x50
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	4a07      	ldr	r2, [pc, #28]	; (800061c <vApplicationGetIdleTaskMemory+0x2c>)
 8000600:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <vApplicationGetIdleTaskMemory+0x30>)
 8000606:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	2000002c 	.word	0x2000002c
 8000620:	20000080 	.word	0x20000080

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b5b0      	push	{r4, r5, r7, lr}
 8000626:	b08e      	sub	sp, #56	; 0x38
 8000628:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f000 f91d 	bl	8000868 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f7ff ff71 	bl	8000514 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 f82f 	bl	8000694 <MX_GPIO_Init>

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <main+0x60>)
 8000638:	f107 041c 	add.w	r4, r7, #28
 800063c:	461d      	mov	r5, r3
 800063e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000642:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000646:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f001 f9e2 	bl	8001a1a <osThreadCreate>
 8000656:	4603      	mov	r3, r0
 8000658:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <main+0x64>)
 800065a:	6013      	str	r3, [r2, #0]

  /* definition and creation of BlinkLED */
  osThreadDef(blinkaled, StartTask02, osPriorityIdle, 0, 128);
 800065c:	4b0b      	ldr	r3, [pc, #44]	; (800068c <main+0x68>)
 800065e:	463c      	mov	r4, r7
 8000660:	461d      	mov	r5, r3
 8000662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000666:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BlinkLEDHandle = osThreadCreate(osThread(blinkaled), NULL);
 800066e:	463b      	mov	r3, r7
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f001 f9d1 	bl	8001a1a <osThreadCreate>
 8000678:	4603      	mov	r3, r0
 800067a:	4a05      	ldr	r2, [pc, #20]	; (8000690 <main+0x6c>)
 800067c:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 800067e:	f001 f9c5 	bl	8001a0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */

  while (1)
 8000682:	e7fe      	b.n	8000682 <main+0x5e>
 8000684:	08002f34 	.word	0x08002f34
 8000688:	20000280 	.word	0x20000280
 800068c:	08002f50 	.word	0x08002f50
 8000690:	20000284 	.word	0x20000284

08000694 <MX_GPIO_Init>:
  * @param None
  * @retval None
  */

static void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_GPIO_Init+0x5c>)
 80006ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b0:	4a0f      	ldr	r2, [pc, #60]	; (80006f0 <MX_GPIO_Init+0x5c>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6313      	str	r3, [r2, #48]	; 0x30
 80006b8:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <MX_GPIO_Init+0x5c>)
 80006ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006bc:	f003 0301 	and.w	r3, r3, #1
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	683b      	ldr	r3, [r7, #0]


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2120      	movs	r1, #32
 80006c8:	480a      	ldr	r0, [pc, #40]	; (80006f4 <MX_GPIO_Init+0x60>)
 80006ca:	f000 fbb9 	bl	8000e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006ce:	2320      	movs	r3, #32
 80006d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d2:	2301      	movs	r3, #1
 80006d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	4619      	mov	r1, r3
 80006e2:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_GPIO_Init+0x60>)
 80006e4:	f000 fa18 	bl	8000b18 <HAL_GPIO_Init>

}
 80006e8:	bf00      	nop
 80006ea:	3718      	adds	r7, #24
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40020000 	.word	0x40020000

080006f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000700:	2001      	movs	r0, #1
 8000702:	f001 f9d6 	bl	8001ab2 <osDelay>
 8000706:	e7fb      	b.n	8000700 <StartDefaultTask+0x8>

08000708 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    blinkaled();
 8000710:	f000 f802 	bl	8000718 <blinkaled>
 8000714:	e7fc      	b.n	8000710 <StartTask02+0x8>
	...

08000718 <blinkaled>:
 * Blinks an LED connected to GPIOA Pin 5 by setting it high for 1 second and then low for 1 second.
 * Parameters: None
 * Returns: None
 */
void blinkaled(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800071c:	2201      	movs	r2, #1
 800071e:	2120      	movs	r1, #32
 8000720:	4808      	ldr	r0, [pc, #32]	; (8000744 <blinkaled+0x2c>)
 8000722:	f000 fb8d 	bl	8000e40 <HAL_GPIO_WritePin>
  osDelay(1000);
 8000726:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800072a:	f001 f9c2 	bl	8001ab2 <osDelay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2120      	movs	r1, #32
 8000732:	4804      	ldr	r0, [pc, #16]	; (8000744 <blinkaled+0x2c>)
 8000734:	f000 fb84 	bl	8000e40 <HAL_GPIO_WritePin>
  osDelay(1000);
 8000738:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800073c:	f001 f9b9 	bl	8001ab2 <osDelay>
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40020000 	.word	0x40020000

08000748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_MspInit+0x54>)
 8000754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000756:	4a11      	ldr	r2, [pc, #68]	; (800079c <HAL_MspInit+0x54>)
 8000758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075c:	6453      	str	r3, [r2, #68]	; 0x44
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <HAL_MspInit+0x54>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <HAL_MspInit+0x54>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <HAL_MspInit+0x54>)
 8000774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000778:	6413      	str	r3, [r2, #64]	; 0x40
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <HAL_MspInit+0x54>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	210f      	movs	r1, #15
 800078a:	f06f 0001 	mvn.w	r0, #1
 800078e:	f000 f99a 	bl	8000ac6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <NMI_Handler+0x4>

080007a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <HardFault_Handler+0x4>

080007ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <MemManage_Handler+0x4>

080007b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <BusFault_Handler+0x4>

080007b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <UsageFault_Handler+0x4>

080007be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <Error_Handler>:

void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <Error_Handler+0x8>

080007d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007da:	f000 f897 	bl	800090c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80007de:	f001 feeb 	bl	80025b8 <xTaskGetSchedulerState>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d001      	beq.n	80007ec <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80007e8:	f002 f926 	bl	8002a38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <SystemInit+0x20>)
 80007f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007fa:	4a05      	ldr	r2, [pc, #20]	; (8000810 <SystemInit+0x20>)
 80007fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000814:	f8df d034 	ldr.w	sp, [pc, #52]	; 800084c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000818:	480d      	ldr	r0, [pc, #52]	; (8000850 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800081a:	490e      	ldr	r1, [pc, #56]	; (8000854 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800081c:	4a0e      	ldr	r2, [pc, #56]	; (8000858 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800081e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000820:	e002      	b.n	8000828 <LoopCopyDataInit>

08000822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000826:	3304      	adds	r3, #4

08000828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800082c:	d3f9      	bcc.n	8000822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800082e:	4a0b      	ldr	r2, [pc, #44]	; (800085c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000830:	4c0b      	ldr	r4, [pc, #44]	; (8000860 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000834:	e001      	b.n	800083a <LoopFillZerobss>

08000836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000838:	3204      	adds	r2, #4

0800083a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800083c:	d3fb      	bcc.n	8000836 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800083e:	f7ff ffd7 	bl	80007f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000842:	f002 fb33 	bl	8002eac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000846:	f7ff feed 	bl	8000624 <main>
  bx  lr    
 800084a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800084c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000854:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000858:	08002f94 	.word	0x08002f94
  ldr r2, =_sbss
 800085c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000860:	20003fe0 	.word	0x20003fe0

08000864 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000864:	e7fe      	b.n	8000864 <ADC_IRQHandler>
	...

08000868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <HAL_Init+0x40>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a0d      	ldr	r2, [pc, #52]	; (80008a8 <HAL_Init+0x40>)
 8000872:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000876:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000878:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <HAL_Init+0x40>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <HAL_Init+0x40>)
 800087e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000882:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <HAL_Init+0x40>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a07      	ldr	r2, [pc, #28]	; (80008a8 <HAL_Init+0x40>)
 800088a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800088e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000890:	2003      	movs	r0, #3
 8000892:	f000 f90d 	bl	8000ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000896:	200f      	movs	r0, #15
 8000898:	f000 f808 	bl	80008ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800089c:	f7ff ff54 	bl	8000748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023c00 	.word	0x40023c00

080008ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_InitTick+0x54>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <HAL_InitTick+0x58>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4619      	mov	r1, r3
 80008be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 f917 	bl	8000afe <HAL_SYSTICK_Config>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	e00e      	b.n	80008f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b0f      	cmp	r3, #15
 80008de:	d80a      	bhi.n	80008f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e0:	2200      	movs	r2, #0
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295
 80008e8:	f000 f8ed 	bl	8000ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008ec:	4a06      	ldr	r2, [pc, #24]	; (8000908 <HAL_InitTick+0x5c>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008f2:	2300      	movs	r3, #0
 80008f4:	e000      	b.n	80008f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000000 	.word	0x20000000
 8000904:	20000008 	.word	0x20000008
 8000908:	20000004 	.word	0x20000004

0800090c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_IncTick+0x20>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_IncTick+0x24>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4413      	add	r3, r2
 800091c:	4a04      	ldr	r2, [pc, #16]	; (8000930 <HAL_IncTick+0x24>)
 800091e:	6013      	str	r3, [r2, #0]
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	20000008 	.word	0x20000008
 8000930:	20000288 	.word	0x20000288

08000934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return uwTick;
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <HAL_GetTick+0x14>)
 800093a:	681b      	ldr	r3, [r3, #0]
}
 800093c:	4618      	mov	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	20000288 	.word	0x20000288

0800094c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000968:	4013      	ands	r3, r2
 800096a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097e:	4a04      	ldr	r2, [pc, #16]	; (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	60d3      	str	r3, [r2, #12]
}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <__NVIC_GetPriorityGrouping+0x18>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	f003 0307 	and.w	r3, r3, #7
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	6039      	str	r1, [r7, #0]
 80009ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	db0a      	blt.n	80009da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	490c      	ldr	r1, [pc, #48]	; (80009fc <__NVIC_SetPriority+0x4c>)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	0112      	lsls	r2, r2, #4
 80009d0:	b2d2      	uxtb	r2, r2
 80009d2:	440b      	add	r3, r1
 80009d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d8:	e00a      	b.n	80009f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4908      	ldr	r1, [pc, #32]	; (8000a00 <__NVIC_SetPriority+0x50>)
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	3b04      	subs	r3, #4
 80009e8:	0112      	lsls	r2, r2, #4
 80009ea:	b2d2      	uxtb	r2, r2
 80009ec:	440b      	add	r3, r1
 80009ee:	761a      	strb	r2, [r3, #24]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000e100 	.word	0xe000e100
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b089      	sub	sp, #36	; 0x24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	f1c3 0307 	rsb	r3, r3, #7
 8000a1e:	2b04      	cmp	r3, #4
 8000a20:	bf28      	it	cs
 8000a22:	2304      	movcs	r3, #4
 8000a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	3304      	adds	r3, #4
 8000a2a:	2b06      	cmp	r3, #6
 8000a2c:	d902      	bls.n	8000a34 <NVIC_EncodePriority+0x30>
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	3b03      	subs	r3, #3
 8000a32:	e000      	b.n	8000a36 <NVIC_EncodePriority+0x32>
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	f04f 32ff 	mov.w	r2, #4294967295
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43da      	mvns	r2, r3
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	401a      	ands	r2, r3
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	fa01 f303 	lsl.w	r3, r1, r3
 8000a56:	43d9      	mvns	r1, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a5c:	4313      	orrs	r3, r2
         );
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3724      	adds	r7, #36	; 0x24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a7c:	d301      	bcc.n	8000a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00f      	b.n	8000aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <SysTick_Config+0x40>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a8a:	210f      	movs	r1, #15
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f7ff ff8e 	bl	80009b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <SysTick_Config+0x40>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <SysTick_Config+0x40>)
 8000a9c:	2207      	movs	r2, #7
 8000a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	e000e010 	.word	0xe000e010

08000ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff ff47 	bl	800094c <__NVIC_SetPriorityGrouping>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad8:	f7ff ff5c 	bl	8000994 <__NVIC_GetPriorityGrouping>
 8000adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	68b9      	ldr	r1, [r7, #8]
 8000ae2:	6978      	ldr	r0, [r7, #20]
 8000ae4:	f7ff ff8e 	bl	8000a04 <NVIC_EncodePriority>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff5d 	bl	80009b0 <__NVIC_SetPriority>
}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f7ff ffb0 	bl	8000a6c <SysTick_Config>
 8000b0c:	4603      	mov	r3, r0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b089      	sub	sp, #36	; 0x24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
 8000b32:	e165      	b.n	8000e00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b34:	2201      	movs	r2, #1
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	697a      	ldr	r2, [r7, #20]
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	f040 8154 	bne.w	8000dfa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f003 0303 	and.w	r3, r3, #3
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d005      	beq.n	8000b6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d130      	bne.n	8000bcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	2203      	movs	r2, #3
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	68da      	ldr	r2, [r3, #12]
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	69ba      	ldr	r2, [r7, #24]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	69ba      	ldr	r2, [r7, #24]
 8000bac:	4013      	ands	r3, r2
 8000bae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	091b      	lsrs	r3, r3, #4
 8000bb6:	f003 0201 	and.w	r2, r3, #1
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f003 0303 	and.w	r3, r3, #3
 8000bd4:	2b03      	cmp	r3, #3
 8000bd6:	d017      	beq.n	8000c08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	2203      	movs	r2, #3
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	4013      	ands	r3, r2
 8000bee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	689a      	ldr	r2, [r3, #8]
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f003 0303 	and.w	r3, r3, #3
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d123      	bne.n	8000c5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	08da      	lsrs	r2, r3, #3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3208      	adds	r2, #8
 8000c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	f003 0307 	and.w	r3, r3, #7
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	220f      	movs	r2, #15
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	43db      	mvns	r3, r3
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	4013      	ands	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	691a      	ldr	r2, [r3, #16]
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	08da      	lsrs	r2, r3, #3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3208      	adds	r2, #8
 8000c56:	69b9      	ldr	r1, [r7, #24]
 8000c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	2203      	movs	r2, #3
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	69ba      	ldr	r2, [r7, #24]
 8000c70:	4013      	ands	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0203 	and.w	r2, r3, #3
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	f000 80ae 	beq.w	8000dfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b5d      	ldr	r3, [pc, #372]	; (8000e18 <HAL_GPIO_Init+0x300>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	4a5c      	ldr	r2, [pc, #368]	; (8000e18 <HAL_GPIO_Init+0x300>)
 8000ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cac:	6453      	str	r3, [r2, #68]	; 0x44
 8000cae:	4b5a      	ldr	r3, [pc, #360]	; (8000e18 <HAL_GPIO_Init+0x300>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cba:	4a58      	ldr	r2, [pc, #352]	; (8000e1c <HAL_GPIO_Init+0x304>)
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	089b      	lsrs	r3, r3, #2
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	f003 0303 	and.w	r3, r3, #3
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	220f      	movs	r2, #15
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a4f      	ldr	r2, [pc, #316]	; (8000e20 <HAL_GPIO_Init+0x308>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d025      	beq.n	8000d32 <HAL_GPIO_Init+0x21a>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a4e      	ldr	r2, [pc, #312]	; (8000e24 <HAL_GPIO_Init+0x30c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d01f      	beq.n	8000d2e <HAL_GPIO_Init+0x216>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a4d      	ldr	r2, [pc, #308]	; (8000e28 <HAL_GPIO_Init+0x310>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d019      	beq.n	8000d2a <HAL_GPIO_Init+0x212>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a4c      	ldr	r2, [pc, #304]	; (8000e2c <HAL_GPIO_Init+0x314>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d013      	beq.n	8000d26 <HAL_GPIO_Init+0x20e>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a4b      	ldr	r2, [pc, #300]	; (8000e30 <HAL_GPIO_Init+0x318>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d00d      	beq.n	8000d22 <HAL_GPIO_Init+0x20a>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a4a      	ldr	r2, [pc, #296]	; (8000e34 <HAL_GPIO_Init+0x31c>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d007      	beq.n	8000d1e <HAL_GPIO_Init+0x206>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a49      	ldr	r2, [pc, #292]	; (8000e38 <HAL_GPIO_Init+0x320>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d101      	bne.n	8000d1a <HAL_GPIO_Init+0x202>
 8000d16:	2306      	movs	r3, #6
 8000d18:	e00c      	b.n	8000d34 <HAL_GPIO_Init+0x21c>
 8000d1a:	2307      	movs	r3, #7
 8000d1c:	e00a      	b.n	8000d34 <HAL_GPIO_Init+0x21c>
 8000d1e:	2305      	movs	r3, #5
 8000d20:	e008      	b.n	8000d34 <HAL_GPIO_Init+0x21c>
 8000d22:	2304      	movs	r3, #4
 8000d24:	e006      	b.n	8000d34 <HAL_GPIO_Init+0x21c>
 8000d26:	2303      	movs	r3, #3
 8000d28:	e004      	b.n	8000d34 <HAL_GPIO_Init+0x21c>
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	e002      	b.n	8000d34 <HAL_GPIO_Init+0x21c>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e000      	b.n	8000d34 <HAL_GPIO_Init+0x21c>
 8000d32:	2300      	movs	r3, #0
 8000d34:	69fa      	ldr	r2, [r7, #28]
 8000d36:	f002 0203 	and.w	r2, r2, #3
 8000d3a:	0092      	lsls	r2, r2, #2
 8000d3c:	4093      	lsls	r3, r2
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d44:	4935      	ldr	r1, [pc, #212]	; (8000e1c <HAL_GPIO_Init+0x304>)
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	089b      	lsrs	r3, r3, #2
 8000d4a:	3302      	adds	r3, #2
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d52:	4b3a      	ldr	r3, [pc, #232]	; (8000e3c <HAL_GPIO_Init+0x324>)
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d003      	beq.n	8000d76 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d76:	4a31      	ldr	r2, [pc, #196]	; (8000e3c <HAL_GPIO_Init+0x324>)
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d7c:	4b2f      	ldr	r3, [pc, #188]	; (8000e3c <HAL_GPIO_Init+0x324>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	43db      	mvns	r3, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d003      	beq.n	8000da0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000da0:	4a26      	ldr	r2, [pc, #152]	; (8000e3c <HAL_GPIO_Init+0x324>)
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000da6:	4b25      	ldr	r3, [pc, #148]	; (8000e3c <HAL_GPIO_Init+0x324>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	43db      	mvns	r3, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4013      	ands	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dca:	4a1c      	ldr	r2, [pc, #112]	; (8000e3c <HAL_GPIO_Init+0x324>)
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <HAL_GPIO_Init+0x324>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d003      	beq.n	8000df4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000df4:	4a11      	ldr	r2, [pc, #68]	; (8000e3c <HAL_GPIO_Init+0x324>)
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	61fb      	str	r3, [r7, #28]
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	2b0f      	cmp	r3, #15
 8000e04:	f67f ae96 	bls.w	8000b34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	3724      	adds	r7, #36	; 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40013800 	.word	0x40013800
 8000e20:	40020000 	.word	0x40020000
 8000e24:	40020400 	.word	0x40020400
 8000e28:	40020800 	.word	0x40020800
 8000e2c:	40020c00 	.word	0x40020c00
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40021400 	.word	0x40021400
 8000e38:	40021800 	.word	0x40021800
 8000e3c:	40013c00 	.word	0x40013c00

08000e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	807b      	strh	r3, [r7, #2]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e50:	787b      	ldrb	r3, [r7, #1]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e56:	887a      	ldrh	r2, [r7, #2]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e5c:	e003      	b.n	8000e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e5e:	887b      	ldrh	r3, [r7, #2]
 8000e60:	041a      	lsls	r2, r3, #16
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	619a      	str	r2, [r3, #24]
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d101      	bne.n	8000e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e0cc      	b.n	8001022 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000e88:	4b68      	ldr	r3, [pc, #416]	; (800102c <HAL_RCC_ClockConfig+0x1b8>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 030f 	and.w	r3, r3, #15
 8000e90:	683a      	ldr	r2, [r7, #0]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d90c      	bls.n	8000eb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e96:	4b65      	ldr	r3, [pc, #404]	; (800102c <HAL_RCC_ClockConfig+0x1b8>)
 8000e98:	683a      	ldr	r2, [r7, #0]
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e9e:	4b63      	ldr	r3, [pc, #396]	; (800102c <HAL_RCC_ClockConfig+0x1b8>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	683a      	ldr	r2, [r7, #0]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d001      	beq.n	8000eb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e0b8      	b.n	8001022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d020      	beq.n	8000efe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d005      	beq.n	8000ed4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ec8:	4b59      	ldr	r3, [pc, #356]	; (8001030 <HAL_RCC_ClockConfig+0x1bc>)
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	4a58      	ldr	r2, [pc, #352]	; (8001030 <HAL_RCC_ClockConfig+0x1bc>)
 8000ece:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000ed2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 0308 	and.w	r3, r3, #8
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d005      	beq.n	8000eec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ee0:	4b53      	ldr	r3, [pc, #332]	; (8001030 <HAL_RCC_ClockConfig+0x1bc>)
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	4a52      	ldr	r2, [pc, #328]	; (8001030 <HAL_RCC_ClockConfig+0x1bc>)
 8000ee6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000eea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000eec:	4b50      	ldr	r3, [pc, #320]	; (8001030 <HAL_RCC_ClockConfig+0x1bc>)
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	494d      	ldr	r1, [pc, #308]	; (8001030 <HAL_RCC_ClockConfig+0x1bc>)
 8000efa:	4313      	orrs	r3, r2
 8000efc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d044      	beq.n	8000f94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d107      	bne.n	8000f22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f12:	4b47      	ldr	r3, [pc, #284]	; (8001030 <HAL_RCC_ClockConfig+0x1bc>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d119      	bne.n	8000f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e07f      	b.n	8001022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d003      	beq.n	8000f32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d107      	bne.n	8000f42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f32:	4b3f      	ldr	r3, [pc, #252]	; (8001030 <HAL_RCC_ClockConfig+0x1bc>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d109      	bne.n	8000f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e06f      	b.n	8001022 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f42:	4b3b      	ldr	r3, [pc, #236]	; (8001030 <HAL_RCC_ClockConfig+0x1bc>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e067      	b.n	8001022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f52:	4b37      	ldr	r3, [pc, #220]	; (8001030 <HAL_RCC_ClockConfig+0x1bc>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f023 0203 	bic.w	r2, r3, #3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	4934      	ldr	r1, [pc, #208]	; (8001030 <HAL_RCC_ClockConfig+0x1bc>)
 8000f60:	4313      	orrs	r3, r2
 8000f62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f64:	f7ff fce6 	bl	8000934 <HAL_GetTick>
 8000f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f6a:	e00a      	b.n	8000f82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f6c:	f7ff fce2 	bl	8000934 <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e04f      	b.n	8001022 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f82:	4b2b      	ldr	r3, [pc, #172]	; (8001030 <HAL_RCC_ClockConfig+0x1bc>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f003 020c 	and.w	r2, r3, #12
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d1eb      	bne.n	8000f6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f94:	4b25      	ldr	r3, [pc, #148]	; (800102c <HAL_RCC_ClockConfig+0x1b8>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 030f 	and.w	r3, r3, #15
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d20c      	bcs.n	8000fbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fa2:	4b22      	ldr	r3, [pc, #136]	; (800102c <HAL_RCC_ClockConfig+0x1b8>)
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000faa:	4b20      	ldr	r3, [pc, #128]	; (800102c <HAL_RCC_ClockConfig+0x1b8>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	683a      	ldr	r2, [r7, #0]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d001      	beq.n	8000fbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e032      	b.n	8001022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 0304 	and.w	r3, r3, #4
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d008      	beq.n	8000fda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <HAL_RCC_ClockConfig+0x1bc>)
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	4916      	ldr	r1, [pc, #88]	; (8001030 <HAL_RCC_ClockConfig+0x1bc>)
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0308 	and.w	r3, r3, #8
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d009      	beq.n	8000ffa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_RCC_ClockConfig+0x1bc>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	490e      	ldr	r1, [pc, #56]	; (8001030 <HAL_RCC_ClockConfig+0x1bc>)
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ffa:	f000 f821 	bl	8001040 <HAL_RCC_GetSysClockFreq>
 8000ffe:	4602      	mov	r2, r0
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <HAL_RCC_ClockConfig+0x1bc>)
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	091b      	lsrs	r3, r3, #4
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	490a      	ldr	r1, [pc, #40]	; (8001034 <HAL_RCC_ClockConfig+0x1c0>)
 800100c:	5ccb      	ldrb	r3, [r1, r3]
 800100e:	fa22 f303 	lsr.w	r3, r2, r3
 8001012:	4a09      	ldr	r2, [pc, #36]	; (8001038 <HAL_RCC_ClockConfig+0x1c4>)
 8001014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_RCC_ClockConfig+0x1c8>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fc46 	bl	80008ac <HAL_InitTick>

  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023c00 	.word	0x40023c00
 8001030:	40023800 	.word	0x40023800
 8001034:	08002f74 	.word	0x08002f74
 8001038:	20000000 	.word	0x20000000
 800103c:	20000004 	.word	0x20000004

08001040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001044:	b0ae      	sub	sp, #184	; 0xb8
 8001046:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800104e:	2300      	movs	r3, #0
 8001050:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001054:	2300      	movs	r3, #0
 8001056:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001066:	4bcb      	ldr	r3, [pc, #812]	; (8001394 <HAL_RCC_GetSysClockFreq+0x354>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f003 030c 	and.w	r3, r3, #12
 800106e:	2b0c      	cmp	r3, #12
 8001070:	f200 8206 	bhi.w	8001480 <HAL_RCC_GetSysClockFreq+0x440>
 8001074:	a201      	add	r2, pc, #4	; (adr r2, 800107c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107a:	bf00      	nop
 800107c:	080010b1 	.word	0x080010b1
 8001080:	08001481 	.word	0x08001481
 8001084:	08001481 	.word	0x08001481
 8001088:	08001481 	.word	0x08001481
 800108c:	080010b9 	.word	0x080010b9
 8001090:	08001481 	.word	0x08001481
 8001094:	08001481 	.word	0x08001481
 8001098:	08001481 	.word	0x08001481
 800109c:	080010c1 	.word	0x080010c1
 80010a0:	08001481 	.word	0x08001481
 80010a4:	08001481 	.word	0x08001481
 80010a8:	08001481 	.word	0x08001481
 80010ac:	080012b1 	.word	0x080012b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80010b0:	4bb9      	ldr	r3, [pc, #740]	; (8001398 <HAL_RCC_GetSysClockFreq+0x358>)
 80010b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80010b6:	e1e7      	b.n	8001488 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80010b8:	4bb8      	ldr	r3, [pc, #736]	; (800139c <HAL_RCC_GetSysClockFreq+0x35c>)
 80010ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80010be:	e1e3      	b.n	8001488 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010c0:	4bb4      	ldr	r3, [pc, #720]	; (8001394 <HAL_RCC_GetSysClockFreq+0x354>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010cc:	4bb1      	ldr	r3, [pc, #708]	; (8001394 <HAL_RCC_GetSysClockFreq+0x354>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d071      	beq.n	80011bc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010d8:	4bae      	ldr	r3, [pc, #696]	; (8001394 <HAL_RCC_GetSysClockFreq+0x354>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	099b      	lsrs	r3, r3, #6
 80010de:	2200      	movs	r2, #0
 80010e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80010e4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80010e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80010ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80010f4:	2300      	movs	r3, #0
 80010f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80010fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80010fe:	4622      	mov	r2, r4
 8001100:	462b      	mov	r3, r5
 8001102:	f04f 0000 	mov.w	r0, #0
 8001106:	f04f 0100 	mov.w	r1, #0
 800110a:	0159      	lsls	r1, r3, #5
 800110c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001110:	0150      	lsls	r0, r2, #5
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4621      	mov	r1, r4
 8001118:	1a51      	subs	r1, r2, r1
 800111a:	6439      	str	r1, [r7, #64]	; 0x40
 800111c:	4629      	mov	r1, r5
 800111e:	eb63 0301 	sbc.w	r3, r3, r1
 8001122:	647b      	str	r3, [r7, #68]	; 0x44
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001130:	4649      	mov	r1, r9
 8001132:	018b      	lsls	r3, r1, #6
 8001134:	4641      	mov	r1, r8
 8001136:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800113a:	4641      	mov	r1, r8
 800113c:	018a      	lsls	r2, r1, #6
 800113e:	4641      	mov	r1, r8
 8001140:	1a51      	subs	r1, r2, r1
 8001142:	63b9      	str	r1, [r7, #56]	; 0x38
 8001144:	4649      	mov	r1, r9
 8001146:	eb63 0301 	sbc.w	r3, r3, r1
 800114a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	f04f 0300 	mov.w	r3, #0
 8001154:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001158:	4649      	mov	r1, r9
 800115a:	00cb      	lsls	r3, r1, #3
 800115c:	4641      	mov	r1, r8
 800115e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001162:	4641      	mov	r1, r8
 8001164:	00ca      	lsls	r2, r1, #3
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	4603      	mov	r3, r0
 800116c:	4622      	mov	r2, r4
 800116e:	189b      	adds	r3, r3, r2
 8001170:	633b      	str	r3, [r7, #48]	; 0x30
 8001172:	462b      	mov	r3, r5
 8001174:	460a      	mov	r2, r1
 8001176:	eb42 0303 	adc.w	r3, r2, r3
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001188:	4629      	mov	r1, r5
 800118a:	024b      	lsls	r3, r1, #9
 800118c:	4621      	mov	r1, r4
 800118e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001192:	4621      	mov	r1, r4
 8001194:	024a      	lsls	r2, r1, #9
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800119e:	2200      	movs	r2, #0
 80011a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80011a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80011a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80011ac:	f7ff f830 	bl	8000210 <__aeabi_uldivmod>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4613      	mov	r3, r2
 80011b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80011ba:	e067      	b.n	800128c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011bc:	4b75      	ldr	r3, [pc, #468]	; (8001394 <HAL_RCC_GetSysClockFreq+0x354>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	099b      	lsrs	r3, r3, #6
 80011c2:	2200      	movs	r2, #0
 80011c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80011c8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80011cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80011d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80011d6:	2300      	movs	r3, #0
 80011d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80011da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80011de:	4622      	mov	r2, r4
 80011e0:	462b      	mov	r3, r5
 80011e2:	f04f 0000 	mov.w	r0, #0
 80011e6:	f04f 0100 	mov.w	r1, #0
 80011ea:	0159      	lsls	r1, r3, #5
 80011ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80011f0:	0150      	lsls	r0, r2, #5
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4621      	mov	r1, r4
 80011f8:	1a51      	subs	r1, r2, r1
 80011fa:	62b9      	str	r1, [r7, #40]	; 0x28
 80011fc:	4629      	mov	r1, r5
 80011fe:	eb63 0301 	sbc.w	r3, r3, r1
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001210:	4649      	mov	r1, r9
 8001212:	018b      	lsls	r3, r1, #6
 8001214:	4641      	mov	r1, r8
 8001216:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800121a:	4641      	mov	r1, r8
 800121c:	018a      	lsls	r2, r1, #6
 800121e:	4641      	mov	r1, r8
 8001220:	ebb2 0a01 	subs.w	sl, r2, r1
 8001224:	4649      	mov	r1, r9
 8001226:	eb63 0b01 	sbc.w	fp, r3, r1
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001236:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800123a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800123e:	4692      	mov	sl, r2
 8001240:	469b      	mov	fp, r3
 8001242:	4623      	mov	r3, r4
 8001244:	eb1a 0303 	adds.w	r3, sl, r3
 8001248:	623b      	str	r3, [r7, #32]
 800124a:	462b      	mov	r3, r5
 800124c:	eb4b 0303 	adc.w	r3, fp, r3
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	f04f 0300 	mov.w	r3, #0
 800125a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800125e:	4629      	mov	r1, r5
 8001260:	028b      	lsls	r3, r1, #10
 8001262:	4621      	mov	r1, r4
 8001264:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001268:	4621      	mov	r1, r4
 800126a:	028a      	lsls	r2, r1, #10
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001274:	2200      	movs	r2, #0
 8001276:	673b      	str	r3, [r7, #112]	; 0x70
 8001278:	677a      	str	r2, [r7, #116]	; 0x74
 800127a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800127e:	f7fe ffc7 	bl	8000210 <__aeabi_uldivmod>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4613      	mov	r3, r2
 8001288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800128c:	4b41      	ldr	r3, [pc, #260]	; (8001394 <HAL_RCC_GetSysClockFreq+0x354>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	0c1b      	lsrs	r3, r3, #16
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	3301      	adds	r3, #1
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800129e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80012a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80012ae:	e0eb      	b.n	8001488 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012b0:	4b38      	ldr	r3, [pc, #224]	; (8001394 <HAL_RCC_GetSysClockFreq+0x354>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012bc:	4b35      	ldr	r3, [pc, #212]	; (8001394 <HAL_RCC_GetSysClockFreq+0x354>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d06b      	beq.n	80013a0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012c8:	4b32      	ldr	r3, [pc, #200]	; (8001394 <HAL_RCC_GetSysClockFreq+0x354>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	099b      	lsrs	r3, r3, #6
 80012ce:	2200      	movs	r2, #0
 80012d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80012d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80012d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012da:	663b      	str	r3, [r7, #96]	; 0x60
 80012dc:	2300      	movs	r3, #0
 80012de:	667b      	str	r3, [r7, #100]	; 0x64
 80012e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80012e4:	4622      	mov	r2, r4
 80012e6:	462b      	mov	r3, r5
 80012e8:	f04f 0000 	mov.w	r0, #0
 80012ec:	f04f 0100 	mov.w	r1, #0
 80012f0:	0159      	lsls	r1, r3, #5
 80012f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012f6:	0150      	lsls	r0, r2, #5
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4621      	mov	r1, r4
 80012fe:	1a51      	subs	r1, r2, r1
 8001300:	61b9      	str	r1, [r7, #24]
 8001302:	4629      	mov	r1, r5
 8001304:	eb63 0301 	sbc.w	r3, r3, r1
 8001308:	61fb      	str	r3, [r7, #28]
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001316:	4659      	mov	r1, fp
 8001318:	018b      	lsls	r3, r1, #6
 800131a:	4651      	mov	r1, sl
 800131c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001320:	4651      	mov	r1, sl
 8001322:	018a      	lsls	r2, r1, #6
 8001324:	4651      	mov	r1, sl
 8001326:	ebb2 0801 	subs.w	r8, r2, r1
 800132a:	4659      	mov	r1, fp
 800132c:	eb63 0901 	sbc.w	r9, r3, r1
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800133c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001340:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001344:	4690      	mov	r8, r2
 8001346:	4699      	mov	r9, r3
 8001348:	4623      	mov	r3, r4
 800134a:	eb18 0303 	adds.w	r3, r8, r3
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	462b      	mov	r3, r5
 8001352:	eb49 0303 	adc.w	r3, r9, r3
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	f04f 0300 	mov.w	r3, #0
 8001360:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001364:	4629      	mov	r1, r5
 8001366:	024b      	lsls	r3, r1, #9
 8001368:	4621      	mov	r1, r4
 800136a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800136e:	4621      	mov	r1, r4
 8001370:	024a      	lsls	r2, r1, #9
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800137a:	2200      	movs	r2, #0
 800137c:	65bb      	str	r3, [r7, #88]	; 0x58
 800137e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001380:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001384:	f7fe ff44 	bl	8000210 <__aeabi_uldivmod>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4613      	mov	r3, r2
 800138e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001392:	e065      	b.n	8001460 <HAL_RCC_GetSysClockFreq+0x420>
 8001394:	40023800 	.word	0x40023800
 8001398:	00f42400 	.word	0x00f42400
 800139c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013a0:	4b3d      	ldr	r3, [pc, #244]	; (8001498 <HAL_RCC_GetSysClockFreq+0x458>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	099b      	lsrs	r3, r3, #6
 80013a6:	2200      	movs	r2, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	4611      	mov	r1, r2
 80013ac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80013b0:	653b      	str	r3, [r7, #80]	; 0x50
 80013b2:	2300      	movs	r3, #0
 80013b4:	657b      	str	r3, [r7, #84]	; 0x54
 80013b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80013ba:	4642      	mov	r2, r8
 80013bc:	464b      	mov	r3, r9
 80013be:	f04f 0000 	mov.w	r0, #0
 80013c2:	f04f 0100 	mov.w	r1, #0
 80013c6:	0159      	lsls	r1, r3, #5
 80013c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013cc:	0150      	lsls	r0, r2, #5
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4641      	mov	r1, r8
 80013d4:	1a51      	subs	r1, r2, r1
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	4649      	mov	r1, r9
 80013da:	eb63 0301 	sbc.w	r3, r3, r1
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80013ec:	4659      	mov	r1, fp
 80013ee:	018b      	lsls	r3, r1, #6
 80013f0:	4651      	mov	r1, sl
 80013f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013f6:	4651      	mov	r1, sl
 80013f8:	018a      	lsls	r2, r1, #6
 80013fa:	4651      	mov	r1, sl
 80013fc:	1a54      	subs	r4, r2, r1
 80013fe:	4659      	mov	r1, fp
 8001400:	eb63 0501 	sbc.w	r5, r3, r1
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	f04f 0300 	mov.w	r3, #0
 800140c:	00eb      	lsls	r3, r5, #3
 800140e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001412:	00e2      	lsls	r2, r4, #3
 8001414:	4614      	mov	r4, r2
 8001416:	461d      	mov	r5, r3
 8001418:	4643      	mov	r3, r8
 800141a:	18e3      	adds	r3, r4, r3
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	464b      	mov	r3, r9
 8001420:	eb45 0303 	adc.w	r3, r5, r3
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001432:	4629      	mov	r1, r5
 8001434:	028b      	lsls	r3, r1, #10
 8001436:	4621      	mov	r1, r4
 8001438:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800143c:	4621      	mov	r1, r4
 800143e:	028a      	lsls	r2, r1, #10
 8001440:	4610      	mov	r0, r2
 8001442:	4619      	mov	r1, r3
 8001444:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001448:	2200      	movs	r2, #0
 800144a:	64bb      	str	r3, [r7, #72]	; 0x48
 800144c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800144e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001452:	f7fe fedd 	bl	8000210 <__aeabi_uldivmod>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4613      	mov	r3, r2
 800145c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001460:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <HAL_RCC_GetSysClockFreq+0x458>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	0f1b      	lsrs	r3, r3, #28
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800146e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001472:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001476:	fbb2 f3f3 	udiv	r3, r2, r3
 800147a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800147e:	e003      	b.n	8001488 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001482:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001486:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001488:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800148c:	4618      	mov	r0, r3
 800148e:	37b8      	adds	r7, #184	; 0xb8
 8001490:	46bd      	mov	sp, r7
 8001492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	00f42400 	.word	0x00f42400

080014a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e28d      	b.n	80019ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 8083 	beq.w	80015c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80014c0:	4b94      	ldr	r3, [pc, #592]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 030c 	and.w	r3, r3, #12
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	d019      	beq.n	8001500 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80014cc:	4b91      	ldr	r3, [pc, #580]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	d106      	bne.n	80014e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80014d8:	4b8e      	ldr	r3, [pc, #568]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014e4:	d00c      	beq.n	8001500 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014e6:	4b8b      	ldr	r3, [pc, #556]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80014ee:	2b0c      	cmp	r3, #12
 80014f0:	d112      	bne.n	8001518 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014f2:	4b88      	ldr	r3, [pc, #544]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014fe:	d10b      	bne.n	8001518 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001500:	4b84      	ldr	r3, [pc, #528]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d05b      	beq.n	80015c4 <HAL_RCC_OscConfig+0x124>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d157      	bne.n	80015c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e25a      	b.n	80019ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001520:	d106      	bne.n	8001530 <HAL_RCC_OscConfig+0x90>
 8001522:	4b7c      	ldr	r3, [pc, #496]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a7b      	ldr	r2, [pc, #492]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 8001528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	e01d      	b.n	800156c <HAL_RCC_OscConfig+0xcc>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001538:	d10c      	bne.n	8001554 <HAL_RCC_OscConfig+0xb4>
 800153a:	4b76      	ldr	r3, [pc, #472]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a75      	ldr	r2, [pc, #468]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 8001540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	4b73      	ldr	r3, [pc, #460]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a72      	ldr	r2, [pc, #456]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 800154c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	e00b      	b.n	800156c <HAL_RCC_OscConfig+0xcc>
 8001554:	4b6f      	ldr	r3, [pc, #444]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a6e      	ldr	r2, [pc, #440]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 800155a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	4b6c      	ldr	r3, [pc, #432]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a6b      	ldr	r2, [pc, #428]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 8001566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800156a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d013      	beq.n	800159c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001574:	f7ff f9de 	bl	8000934 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800157c:	f7ff f9da 	bl	8000934 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b64      	cmp	r3, #100	; 0x64
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e21f      	b.n	80019ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158e:	4b61      	ldr	r3, [pc, #388]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0xdc>
 800159a:	e014      	b.n	80015c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159c:	f7ff f9ca 	bl	8000934 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015a4:	f7ff f9c6 	bl	8000934 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b64      	cmp	r3, #100	; 0x64
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e20b      	b.n	80019ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b6:	4b57      	ldr	r3, [pc, #348]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f0      	bne.n	80015a4 <HAL_RCC_OscConfig+0x104>
 80015c2:	e000      	b.n	80015c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d06f      	beq.n	80016b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80015d2:	4b50      	ldr	r3, [pc, #320]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d017      	beq.n	800160e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80015de:	4b4d      	ldr	r3, [pc, #308]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d105      	bne.n	80015f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80015ea:	4b4a      	ldr	r3, [pc, #296]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00b      	beq.n	800160e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015f6:	4b47      	ldr	r3, [pc, #284]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80015fe:	2b0c      	cmp	r3, #12
 8001600:	d11c      	bne.n	800163c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001602:	4b44      	ldr	r3, [pc, #272]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d116      	bne.n	800163c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160e:	4b41      	ldr	r3, [pc, #260]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d005      	beq.n	8001626 <HAL_RCC_OscConfig+0x186>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d001      	beq.n	8001626 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e1d3      	b.n	80019ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001626:	4b3b      	ldr	r3, [pc, #236]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	4937      	ldr	r1, [pc, #220]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 8001636:	4313      	orrs	r3, r2
 8001638:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163a:	e03a      	b.n	80016b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d020      	beq.n	8001686 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001644:	4b34      	ldr	r3, [pc, #208]	; (8001718 <HAL_RCC_OscConfig+0x278>)
 8001646:	2201      	movs	r2, #1
 8001648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164a:	f7ff f973 	bl	8000934 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001652:	f7ff f96f 	bl	8000934 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e1b4      	b.n	80019ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001664:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001670:	4b28      	ldr	r3, [pc, #160]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4925      	ldr	r1, [pc, #148]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 8001680:	4313      	orrs	r3, r2
 8001682:	600b      	str	r3, [r1, #0]
 8001684:	e015      	b.n	80016b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001686:	4b24      	ldr	r3, [pc, #144]	; (8001718 <HAL_RCC_OscConfig+0x278>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168c:	f7ff f952 	bl	8000934 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001694:	f7ff f94e 	bl	8000934 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e193      	b.n	80019ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a6:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d036      	beq.n	800172c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d016      	beq.n	80016f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <HAL_RCC_OscConfig+0x27c>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016cc:	f7ff f932 	bl	8000934 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d4:	f7ff f92e 	bl	8000934 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e173      	b.n	80019ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_RCC_OscConfig+0x274>)
 80016e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x234>
 80016f2:	e01b      	b.n	800172c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_RCC_OscConfig+0x27c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fa:	f7ff f91b 	bl	8000934 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001700:	e00e      	b.n	8001720 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001702:	f7ff f917 	bl	8000934 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d907      	bls.n	8001720 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e15c      	b.n	80019ce <HAL_RCC_OscConfig+0x52e>
 8001714:	40023800 	.word	0x40023800
 8001718:	42470000 	.word	0x42470000
 800171c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001720:	4b8a      	ldr	r3, [pc, #552]	; (800194c <HAL_RCC_OscConfig+0x4ac>)
 8001722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1ea      	bne.n	8001702 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 8097 	beq.w	8001868 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800173e:	4b83      	ldr	r3, [pc, #524]	; (800194c <HAL_RCC_OscConfig+0x4ac>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10f      	bne.n	800176a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	4b7f      	ldr	r3, [pc, #508]	; (800194c <HAL_RCC_OscConfig+0x4ac>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	4a7e      	ldr	r2, [pc, #504]	; (800194c <HAL_RCC_OscConfig+0x4ac>)
 8001754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001758:	6413      	str	r3, [r2, #64]	; 0x40
 800175a:	4b7c      	ldr	r3, [pc, #496]	; (800194c <HAL_RCC_OscConfig+0x4ac>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001766:	2301      	movs	r3, #1
 8001768:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176a:	4b79      	ldr	r3, [pc, #484]	; (8001950 <HAL_RCC_OscConfig+0x4b0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001772:	2b00      	cmp	r3, #0
 8001774:	d118      	bne.n	80017a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001776:	4b76      	ldr	r3, [pc, #472]	; (8001950 <HAL_RCC_OscConfig+0x4b0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a75      	ldr	r2, [pc, #468]	; (8001950 <HAL_RCC_OscConfig+0x4b0>)
 800177c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001782:	f7ff f8d7 	bl	8000934 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800178a:	f7ff f8d3 	bl	8000934 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e118      	b.n	80019ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179c:	4b6c      	ldr	r3, [pc, #432]	; (8001950 <HAL_RCC_OscConfig+0x4b0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d106      	bne.n	80017be <HAL_RCC_OscConfig+0x31e>
 80017b0:	4b66      	ldr	r3, [pc, #408]	; (800194c <HAL_RCC_OscConfig+0x4ac>)
 80017b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b4:	4a65      	ldr	r2, [pc, #404]	; (800194c <HAL_RCC_OscConfig+0x4ac>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6713      	str	r3, [r2, #112]	; 0x70
 80017bc:	e01c      	b.n	80017f8 <HAL_RCC_OscConfig+0x358>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	2b05      	cmp	r3, #5
 80017c4:	d10c      	bne.n	80017e0 <HAL_RCC_OscConfig+0x340>
 80017c6:	4b61      	ldr	r3, [pc, #388]	; (800194c <HAL_RCC_OscConfig+0x4ac>)
 80017c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ca:	4a60      	ldr	r2, [pc, #384]	; (800194c <HAL_RCC_OscConfig+0x4ac>)
 80017cc:	f043 0304 	orr.w	r3, r3, #4
 80017d0:	6713      	str	r3, [r2, #112]	; 0x70
 80017d2:	4b5e      	ldr	r3, [pc, #376]	; (800194c <HAL_RCC_OscConfig+0x4ac>)
 80017d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d6:	4a5d      	ldr	r2, [pc, #372]	; (800194c <HAL_RCC_OscConfig+0x4ac>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6713      	str	r3, [r2, #112]	; 0x70
 80017de:	e00b      	b.n	80017f8 <HAL_RCC_OscConfig+0x358>
 80017e0:	4b5a      	ldr	r3, [pc, #360]	; (800194c <HAL_RCC_OscConfig+0x4ac>)
 80017e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e4:	4a59      	ldr	r2, [pc, #356]	; (800194c <HAL_RCC_OscConfig+0x4ac>)
 80017e6:	f023 0301 	bic.w	r3, r3, #1
 80017ea:	6713      	str	r3, [r2, #112]	; 0x70
 80017ec:	4b57      	ldr	r3, [pc, #348]	; (800194c <HAL_RCC_OscConfig+0x4ac>)
 80017ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f0:	4a56      	ldr	r2, [pc, #344]	; (800194c <HAL_RCC_OscConfig+0x4ac>)
 80017f2:	f023 0304 	bic.w	r3, r3, #4
 80017f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d015      	beq.n	800182c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001800:	f7ff f898 	bl	8000934 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001806:	e00a      	b.n	800181e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001808:	f7ff f894 	bl	8000934 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f241 3288 	movw	r2, #5000	; 0x1388
 8001816:	4293      	cmp	r3, r2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e0d7      	b.n	80019ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800181e:	4b4b      	ldr	r3, [pc, #300]	; (800194c <HAL_RCC_OscConfig+0x4ac>)
 8001820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0ee      	beq.n	8001808 <HAL_RCC_OscConfig+0x368>
 800182a:	e014      	b.n	8001856 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182c:	f7ff f882 	bl	8000934 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001832:	e00a      	b.n	800184a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001834:	f7ff f87e 	bl	8000934 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e0c1      	b.n	80019ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800184a:	4b40      	ldr	r3, [pc, #256]	; (800194c <HAL_RCC_OscConfig+0x4ac>)
 800184c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1ee      	bne.n	8001834 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001856:	7dfb      	ldrb	r3, [r7, #23]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d105      	bne.n	8001868 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800185c:	4b3b      	ldr	r3, [pc, #236]	; (800194c <HAL_RCC_OscConfig+0x4ac>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	4a3a      	ldr	r2, [pc, #232]	; (800194c <HAL_RCC_OscConfig+0x4ac>)
 8001862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001866:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 80ad 	beq.w	80019cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001872:	4b36      	ldr	r3, [pc, #216]	; (800194c <HAL_RCC_OscConfig+0x4ac>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b08      	cmp	r3, #8
 800187c:	d060      	beq.n	8001940 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d145      	bne.n	8001912 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001886:	4b33      	ldr	r3, [pc, #204]	; (8001954 <HAL_RCC_OscConfig+0x4b4>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff f852 	bl	8000934 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001894:	f7ff f84e 	bl	8000934 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e093      	b.n	80019ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a6:	4b29      	ldr	r3, [pc, #164]	; (800194c <HAL_RCC_OscConfig+0x4ac>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69da      	ldr	r2, [r3, #28]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	019b      	lsls	r3, r3, #6
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c8:	085b      	lsrs	r3, r3, #1
 80018ca:	3b01      	subs	r3, #1
 80018cc:	041b      	lsls	r3, r3, #16
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d4:	061b      	lsls	r3, r3, #24
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	071b      	lsls	r3, r3, #28
 80018de:	491b      	ldr	r1, [pc, #108]	; (800194c <HAL_RCC_OscConfig+0x4ac>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018e4:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <HAL_RCC_OscConfig+0x4b4>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ea:	f7ff f823 	bl	8000934 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f2:	f7ff f81f 	bl	8000934 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e064      	b.n	80019ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <HAL_RCC_OscConfig+0x4ac>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0f0      	beq.n	80018f2 <HAL_RCC_OscConfig+0x452>
 8001910:	e05c      	b.n	80019cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <HAL_RCC_OscConfig+0x4b4>)
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001918:	f7ff f80c 	bl	8000934 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001920:	f7ff f808 	bl	8000934 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e04d      	b.n	80019ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_RCC_OscConfig+0x4ac>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_OscConfig+0x480>
 800193e:	e045      	b.n	80019cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d107      	bne.n	8001958 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e040      	b.n	80019ce <HAL_RCC_OscConfig+0x52e>
 800194c:	40023800 	.word	0x40023800
 8001950:	40007000 	.word	0x40007000
 8001954:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001958:	4b1f      	ldr	r3, [pc, #124]	; (80019d8 <HAL_RCC_OscConfig+0x538>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d030      	beq.n	80019c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001970:	429a      	cmp	r2, r3
 8001972:	d129      	bne.n	80019c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d122      	bne.n	80019c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001988:	4013      	ands	r3, r2
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800198e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001990:	4293      	cmp	r3, r2
 8001992:	d119      	bne.n	80019c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199e:	085b      	lsrs	r3, r3, #1
 80019a0:	3b01      	subs	r3, #1
 80019a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d10f      	bne.n	80019c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d107      	bne.n	80019c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d001      	beq.n	80019cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40023800 	.word	0x40023800

080019dc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80019ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ee:	2b84      	cmp	r3, #132	; 0x84
 80019f0:	d005      	beq.n	80019fe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80019f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4413      	add	r3, r2
 80019fa:	3303      	adds	r3, #3
 80019fc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80019fe:	68fb      	ldr	r3, [r7, #12]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001a10:	f000 fade 	bl	8001fd0 <vTaskStartScheduler>
  
  return osOK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001a1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a1c:	b089      	sub	sp, #36	; 0x24
 8001a1e:	af04      	add	r7, sp, #16
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d020      	beq.n	8001a6e <osThreadCreate+0x54>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d01c      	beq.n	8001a6e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685c      	ldr	r4, [r3, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681d      	ldr	r5, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691e      	ldr	r6, [r3, #16]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ffc8 	bl	80019dc <makeFreeRtosPriority>
 8001a4c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a56:	9202      	str	r2, [sp, #8]
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	9100      	str	r1, [sp, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	4632      	mov	r2, r6
 8001a60:	4629      	mov	r1, r5
 8001a62:	4620      	mov	r0, r4
 8001a64:	f000 f8ed 	bl	8001c42 <xTaskCreateStatic>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	e01c      	b.n	8001aa8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685c      	ldr	r4, [r3, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a7a:	b29e      	uxth	r6, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff ffaa 	bl	80019dc <makeFreeRtosPriority>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	f107 030c 	add.w	r3, r7, #12
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	9200      	str	r2, [sp, #0]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	4632      	mov	r2, r6
 8001a96:	4629      	mov	r1, r5
 8001a98:	4620      	mov	r0, r4
 8001a9a:	f000 f92f 	bl	8001cfc <xTaskCreate>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d001      	beq.n	8001aa8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e000      	b.n	8001aaa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ab2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b084      	sub	sp, #16
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <osDelay+0x16>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	e000      	b.n	8001aca <osDelay+0x18>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 fa4c 	bl	8001f68 <vTaskDelay>
  
  return osOK;
 8001ad0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f103 0208 	add.w	r2, r3, #8
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f04f 32ff 	mov.w	r2, #4294967295
 8001af2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f103 0208 	add.w	r2, r3, #8
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f103 0208 	add.w	r2, r3, #8
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	601a      	str	r2, [r3, #0]
}
 8001b70:	bf00      	nop
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b92:	d103      	bne.n	8001b9c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	e00c      	b.n	8001bb6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3308      	adds	r3, #8
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	e002      	b.n	8001baa <vListInsert+0x2e>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d2f6      	bcs.n	8001ba4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	601a      	str	r2, [r3, #0]
}
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b085      	sub	sp, #20
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6892      	ldr	r2, [r2, #8]
 8001c04:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6852      	ldr	r2, [r2, #4]
 8001c0e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d103      	bne.n	8001c22 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	1e5a      	subs	r2, r3, #1
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b08e      	sub	sp, #56	; 0x38
 8001c46:	af04      	add	r7, sp, #16
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10a      	bne.n	8001c6c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c5a:	f383 8811 	msr	BASEPRI, r3
 8001c5e:	f3bf 8f6f 	isb	sy
 8001c62:	f3bf 8f4f 	dsb	sy
 8001c66:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001c68:	bf00      	nop
 8001c6a:	e7fe      	b.n	8001c6a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10a      	bne.n	8001c88 <xTaskCreateStatic+0x46>
	__asm volatile
 8001c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c76:	f383 8811 	msr	BASEPRI, r3
 8001c7a:	f3bf 8f6f 	isb	sy
 8001c7e:	f3bf 8f4f 	dsb	sy
 8001c82:	61fb      	str	r3, [r7, #28]
}
 8001c84:	bf00      	nop
 8001c86:	e7fe      	b.n	8001c86 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001c88:	2354      	movs	r3, #84	; 0x54
 8001c8a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	2b54      	cmp	r3, #84	; 0x54
 8001c90:	d00a      	beq.n	8001ca8 <xTaskCreateStatic+0x66>
	__asm volatile
 8001c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c96:	f383 8811 	msr	BASEPRI, r3
 8001c9a:	f3bf 8f6f 	isb	sy
 8001c9e:	f3bf 8f4f 	dsb	sy
 8001ca2:	61bb      	str	r3, [r7, #24]
}
 8001ca4:	bf00      	nop
 8001ca6:	e7fe      	b.n	8001ca6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001ca8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d01e      	beq.n	8001cee <xTaskCreateStatic+0xac>
 8001cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d01b      	beq.n	8001cee <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cbe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001cc8:	2300      	movs	r3, #0
 8001cca:	9303      	str	r3, [sp, #12]
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	9302      	str	r3, [sp, #8]
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	68b9      	ldr	r1, [r7, #8]
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f000 f850 	bl	8001d86 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001ce6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ce8:	f000 f8d4 	bl	8001e94 <prvAddNewTaskToReadyList>
 8001cec:	e001      	b.n	8001cf2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001cf2:	697b      	ldr	r3, [r7, #20]
	}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3728      	adds	r7, #40	; 0x28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08c      	sub	sp, #48	; 0x30
 8001d00:	af04      	add	r7, sp, #16
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001d0c:	88fb      	ldrh	r3, [r7, #6]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 fee1 	bl	8002ad8 <pvPortMalloc>
 8001d16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00e      	beq.n	8001d3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001d1e:	2054      	movs	r0, #84	; 0x54
 8001d20:	f000 feda 	bl	8002ad8 <pvPortMalloc>
 8001d24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	631a      	str	r2, [r3, #48]	; 0x30
 8001d32:	e005      	b.n	8001d40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001d34:	6978      	ldr	r0, [r7, #20]
 8001d36:	f000 ff9b 	bl	8002c70 <vPortFree>
 8001d3a:	e001      	b.n	8001d40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d017      	beq.n	8001d76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001d4e:	88fa      	ldrh	r2, [r7, #6]
 8001d50:	2300      	movs	r3, #0
 8001d52:	9303      	str	r3, [sp, #12]
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	9302      	str	r3, [sp, #8]
 8001d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5a:	9301      	str	r3, [sp, #4]
 8001d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	68b9      	ldr	r1, [r7, #8]
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f000 f80e 	bl	8001d86 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001d6a:	69f8      	ldr	r0, [r7, #28]
 8001d6c:	f000 f892 	bl	8001e94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001d70:	2301      	movs	r3, #1
 8001d72:	61bb      	str	r3, [r7, #24]
 8001d74:	e002      	b.n	8001d7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001d76:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001d7c:	69bb      	ldr	r3, [r7, #24]
	}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3720      	adds	r7, #32
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b088      	sub	sp, #32
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	f023 0307 	bic.w	r3, r3, #7
 8001dac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00a      	beq.n	8001dce <prvInitialiseNewTask+0x48>
	__asm volatile
 8001db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dbc:	f383 8811 	msr	BASEPRI, r3
 8001dc0:	f3bf 8f6f 	isb	sy
 8001dc4:	f3bf 8f4f 	dsb	sy
 8001dc8:	617b      	str	r3, [r7, #20]
}
 8001dca:	bf00      	nop
 8001dcc:	e7fe      	b.n	8001dcc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d01f      	beq.n	8001e14 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61fb      	str	r3, [r7, #28]
 8001dd8:	e012      	b.n	8001e00 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	4413      	add	r3, r2
 8001de0:	7819      	ldrb	r1, [r3, #0]
 8001de2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	4413      	add	r3, r2
 8001de8:	3334      	adds	r3, #52	; 0x34
 8001dea:	460a      	mov	r2, r1
 8001dec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	4413      	add	r3, r2
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d006      	beq.n	8001e08 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	61fb      	str	r3, [r7, #28]
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	2b0f      	cmp	r3, #15
 8001e04:	d9e9      	bls.n	8001dda <prvInitialiseNewTask+0x54>
 8001e06:	e000      	b.n	8001e0a <prvInitialiseNewTask+0x84>
			{
				break;
 8001e08:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e12:	e003      	b.n	8001e1c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d901      	bls.n	8001e26 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001e22:	2306      	movs	r3, #6
 8001e24:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e2a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e30:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e34:	2200      	movs	r2, #0
 8001e36:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fe6c 	bl	8001b1a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e44:	3318      	adds	r3, #24
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fe67 	bl	8001b1a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e50:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e54:	f1c3 0207 	rsb	r2, r3, #7
 8001e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e60:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e64:	2200      	movs	r2, #0
 8001e66:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	68f9      	ldr	r1, [r7, #12]
 8001e74:	69b8      	ldr	r0, [r7, #24]
 8001e76:	f000 fc23 	bl	80026c0 <pxPortInitialiseStack>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d002      	beq.n	8001e8c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e8a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001e8c:	bf00      	nop
 8001e8e:	3720      	adds	r7, #32
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001e9c:	f000 fd3a 	bl	8002914 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001ea0:	4b2a      	ldr	r3, [pc, #168]	; (8001f4c <prvAddNewTaskToReadyList+0xb8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	4a29      	ldr	r2, [pc, #164]	; (8001f4c <prvAddNewTaskToReadyList+0xb8>)
 8001ea8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001eaa:	4b29      	ldr	r3, [pc, #164]	; (8001f50 <prvAddNewTaskToReadyList+0xbc>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d109      	bne.n	8001ec6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001eb2:	4a27      	ldr	r2, [pc, #156]	; (8001f50 <prvAddNewTaskToReadyList+0xbc>)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001eb8:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <prvAddNewTaskToReadyList+0xb8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d110      	bne.n	8001ee2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001ec0:	f000 fabc 	bl	800243c <prvInitialiseTaskLists>
 8001ec4:	e00d      	b.n	8001ee2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001ec6:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <prvAddNewTaskToReadyList+0xc0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d109      	bne.n	8001ee2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001ece:	4b20      	ldr	r3, [pc, #128]	; (8001f50 <prvAddNewTaskToReadyList+0xbc>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d802      	bhi.n	8001ee2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001edc:	4a1c      	ldr	r2, [pc, #112]	; (8001f50 <prvAddNewTaskToReadyList+0xbc>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <prvAddNewTaskToReadyList+0xc4>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	4a1b      	ldr	r2, [pc, #108]	; (8001f58 <prvAddNewTaskToReadyList+0xc4>)
 8001eea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <prvAddNewTaskToReadyList+0xc8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	4a18      	ldr	r2, [pc, #96]	; (8001f5c <prvAddNewTaskToReadyList+0xc8>)
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4a15      	ldr	r2, [pc, #84]	; (8001f60 <prvAddNewTaskToReadyList+0xcc>)
 8001f0c:	441a      	add	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3304      	adds	r3, #4
 8001f12:	4619      	mov	r1, r3
 8001f14:	4610      	mov	r0, r2
 8001f16:	f7ff fe0d 	bl	8001b34 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001f1a:	f000 fd2b 	bl	8002974 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001f1e:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <prvAddNewTaskToReadyList+0xc0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00e      	beq.n	8001f44 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001f26:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <prvAddNewTaskToReadyList+0xbc>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d207      	bcs.n	8001f44 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <prvAddNewTaskToReadyList+0xd0>)
 8001f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	f3bf 8f4f 	dsb	sy
 8001f40:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	2000038c 	.word	0x2000038c
 8001f50:	2000028c 	.word	0x2000028c
 8001f54:	20000398 	.word	0x20000398
 8001f58:	200003a8 	.word	0x200003a8
 8001f5c:	20000394 	.word	0x20000394
 8001f60:	20000290 	.word	0x20000290
 8001f64:	e000ed04 	.word	0xe000ed04

08001f68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d017      	beq.n	8001faa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001f7a:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <vTaskDelay+0x60>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00a      	beq.n	8001f98 <vTaskDelay+0x30>
	__asm volatile
 8001f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f86:	f383 8811 	msr	BASEPRI, r3
 8001f8a:	f3bf 8f6f 	isb	sy
 8001f8e:	f3bf 8f4f 	dsb	sy
 8001f92:	60bb      	str	r3, [r7, #8]
}
 8001f94:	bf00      	nop
 8001f96:	e7fe      	b.n	8001f96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001f98:	f000 f87a 	bl	8002090 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 fb28 	bl	80025f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001fa4:	f000 f882 	bl	80020ac <xTaskResumeAll>
 8001fa8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d107      	bne.n	8001fc0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <vTaskDelay+0x64>)
 8001fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	f3bf 8f4f 	dsb	sy
 8001fbc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001fc0:	bf00      	nop
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	200003b4 	.word	0x200003b4
 8001fcc:	e000ed04 	.word	0xe000ed04

08001fd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08a      	sub	sp, #40	; 0x28
 8001fd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001fde:	463a      	mov	r2, r7
 8001fe0:	1d39      	adds	r1, r7, #4
 8001fe2:	f107 0308 	add.w	r3, r7, #8
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fb02 	bl	80005f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001fec:	6839      	ldr	r1, [r7, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	9202      	str	r2, [sp, #8]
 8001ff4:	9301      	str	r3, [sp, #4]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	460a      	mov	r2, r1
 8001ffe:	491e      	ldr	r1, [pc, #120]	; (8002078 <vTaskStartScheduler+0xa8>)
 8002000:	481e      	ldr	r0, [pc, #120]	; (800207c <vTaskStartScheduler+0xac>)
 8002002:	f7ff fe1e 	bl	8001c42 <xTaskCreateStatic>
 8002006:	4603      	mov	r3, r0
 8002008:	4a1d      	ldr	r2, [pc, #116]	; (8002080 <vTaskStartScheduler+0xb0>)
 800200a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800200c:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <vTaskStartScheduler+0xb0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d002      	beq.n	800201a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002014:	2301      	movs	r3, #1
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	e001      	b.n	800201e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d116      	bne.n	8002052 <vTaskStartScheduler+0x82>
	__asm volatile
 8002024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002028:	f383 8811 	msr	BASEPRI, r3
 800202c:	f3bf 8f6f 	isb	sy
 8002030:	f3bf 8f4f 	dsb	sy
 8002034:	613b      	str	r3, [r7, #16]
}
 8002036:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <vTaskStartScheduler+0xb4>)
 800203a:	f04f 32ff 	mov.w	r2, #4294967295
 800203e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <vTaskStartScheduler+0xb8>)
 8002042:	2201      	movs	r2, #1
 8002044:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002046:	4b11      	ldr	r3, [pc, #68]	; (800208c <vTaskStartScheduler+0xbc>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800204c:	f000 fbc0 	bl	80027d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002050:	e00e      	b.n	8002070 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002058:	d10a      	bne.n	8002070 <vTaskStartScheduler+0xa0>
	__asm volatile
 800205a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800205e:	f383 8811 	msr	BASEPRI, r3
 8002062:	f3bf 8f6f 	isb	sy
 8002066:	f3bf 8f4f 	dsb	sy
 800206a:	60fb      	str	r3, [r7, #12]
}
 800206c:	bf00      	nop
 800206e:	e7fe      	b.n	800206e <vTaskStartScheduler+0x9e>
}
 8002070:	bf00      	nop
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	08002f6c 	.word	0x08002f6c
 800207c:	0800240d 	.word	0x0800240d
 8002080:	200003b0 	.word	0x200003b0
 8002084:	200003ac 	.word	0x200003ac
 8002088:	20000398 	.word	0x20000398
 800208c:	20000390 	.word	0x20000390

08002090 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <vTaskSuspendAll+0x18>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	3301      	adds	r3, #1
 800209a:	4a03      	ldr	r2, [pc, #12]	; (80020a8 <vTaskSuspendAll+0x18>)
 800209c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800209e:	bf00      	nop
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	200003b4 	.word	0x200003b4

080020ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80020ba:	4b41      	ldr	r3, [pc, #260]	; (80021c0 <xTaskResumeAll+0x114>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10a      	bne.n	80020d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80020c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c6:	f383 8811 	msr	BASEPRI, r3
 80020ca:	f3bf 8f6f 	isb	sy
 80020ce:	f3bf 8f4f 	dsb	sy
 80020d2:	603b      	str	r3, [r7, #0]
}
 80020d4:	bf00      	nop
 80020d6:	e7fe      	b.n	80020d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80020d8:	f000 fc1c 	bl	8002914 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80020dc:	4b38      	ldr	r3, [pc, #224]	; (80021c0 <xTaskResumeAll+0x114>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	3b01      	subs	r3, #1
 80020e2:	4a37      	ldr	r2, [pc, #220]	; (80021c0 <xTaskResumeAll+0x114>)
 80020e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020e6:	4b36      	ldr	r3, [pc, #216]	; (80021c0 <xTaskResumeAll+0x114>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d161      	bne.n	80021b2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80020ee:	4b35      	ldr	r3, [pc, #212]	; (80021c4 <xTaskResumeAll+0x118>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d05d      	beq.n	80021b2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80020f6:	e02e      	b.n	8002156 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020f8:	4b33      	ldr	r3, [pc, #204]	; (80021c8 <xTaskResumeAll+0x11c>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	3318      	adds	r3, #24
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fd72 	bl	8001bee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	3304      	adds	r3, #4
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fd6d 	bl	8001bee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	2201      	movs	r2, #1
 800211a:	409a      	lsls	r2, r3
 800211c:	4b2b      	ldr	r3, [pc, #172]	; (80021cc <xTaskResumeAll+0x120>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4313      	orrs	r3, r2
 8002122:	4a2a      	ldr	r2, [pc, #168]	; (80021cc <xTaskResumeAll+0x120>)
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4a27      	ldr	r2, [pc, #156]	; (80021d0 <xTaskResumeAll+0x124>)
 8002134:	441a      	add	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	3304      	adds	r3, #4
 800213a:	4619      	mov	r1, r3
 800213c:	4610      	mov	r0, r2
 800213e:	f7ff fcf9 	bl	8001b34 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002146:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <xTaskResumeAll+0x128>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	429a      	cmp	r2, r3
 800214e:	d302      	bcc.n	8002156 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002150:	4b21      	ldr	r3, [pc, #132]	; (80021d8 <xTaskResumeAll+0x12c>)
 8002152:	2201      	movs	r2, #1
 8002154:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002156:	4b1c      	ldr	r3, [pc, #112]	; (80021c8 <xTaskResumeAll+0x11c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1cc      	bne.n	80020f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002164:	f000 fa08 	bl	8002578 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002168:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <xTaskResumeAll+0x130>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d010      	beq.n	8002196 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002174:	f000 f836 	bl	80021e4 <xTaskIncrementTick>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800217e:	4b16      	ldr	r3, [pc, #88]	; (80021d8 <xTaskResumeAll+0x12c>)
 8002180:	2201      	movs	r2, #1
 8002182:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3b01      	subs	r3, #1
 8002188:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1f1      	bne.n	8002174 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002190:	4b12      	ldr	r3, [pc, #72]	; (80021dc <xTaskResumeAll+0x130>)
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <xTaskResumeAll+0x12c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d009      	beq.n	80021b2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800219e:	2301      	movs	r3, #1
 80021a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80021a2:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <xTaskResumeAll+0x134>)
 80021a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	f3bf 8f4f 	dsb	sy
 80021ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80021b2:	f000 fbdf 	bl	8002974 <vPortExitCritical>

	return xAlreadyYielded;
 80021b6:	68bb      	ldr	r3, [r7, #8]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	200003b4 	.word	0x200003b4
 80021c4:	2000038c 	.word	0x2000038c
 80021c8:	2000034c 	.word	0x2000034c
 80021cc:	20000394 	.word	0x20000394
 80021d0:	20000290 	.word	0x20000290
 80021d4:	2000028c 	.word	0x2000028c
 80021d8:	200003a0 	.word	0x200003a0
 80021dc:	2000039c 	.word	0x2000039c
 80021e0:	e000ed04 	.word	0xe000ed04

080021e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021ee:	4b4e      	ldr	r3, [pc, #312]	; (8002328 <xTaskIncrementTick+0x144>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 808e 	bne.w	8002314 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80021f8:	4b4c      	ldr	r3, [pc, #304]	; (800232c <xTaskIncrementTick+0x148>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	3301      	adds	r3, #1
 80021fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002200:	4a4a      	ldr	r2, [pc, #296]	; (800232c <xTaskIncrementTick+0x148>)
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d120      	bne.n	800224e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800220c:	4b48      	ldr	r3, [pc, #288]	; (8002330 <xTaskIncrementTick+0x14c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00a      	beq.n	800222c <xTaskIncrementTick+0x48>
	__asm volatile
 8002216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800221a:	f383 8811 	msr	BASEPRI, r3
 800221e:	f3bf 8f6f 	isb	sy
 8002222:	f3bf 8f4f 	dsb	sy
 8002226:	603b      	str	r3, [r7, #0]
}
 8002228:	bf00      	nop
 800222a:	e7fe      	b.n	800222a <xTaskIncrementTick+0x46>
 800222c:	4b40      	ldr	r3, [pc, #256]	; (8002330 <xTaskIncrementTick+0x14c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	4b40      	ldr	r3, [pc, #256]	; (8002334 <xTaskIncrementTick+0x150>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a3e      	ldr	r2, [pc, #248]	; (8002330 <xTaskIncrementTick+0x14c>)
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	4a3e      	ldr	r2, [pc, #248]	; (8002334 <xTaskIncrementTick+0x150>)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	4b3d      	ldr	r3, [pc, #244]	; (8002338 <xTaskIncrementTick+0x154>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	3301      	adds	r3, #1
 8002246:	4a3c      	ldr	r2, [pc, #240]	; (8002338 <xTaskIncrementTick+0x154>)
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	f000 f995 	bl	8002578 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800224e:	4b3b      	ldr	r3, [pc, #236]	; (800233c <xTaskIncrementTick+0x158>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	429a      	cmp	r2, r3
 8002256:	d348      	bcc.n	80022ea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002258:	4b35      	ldr	r3, [pc, #212]	; (8002330 <xTaskIncrementTick+0x14c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d104      	bne.n	800226c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002262:	4b36      	ldr	r3, [pc, #216]	; (800233c <xTaskIncrementTick+0x158>)
 8002264:	f04f 32ff 	mov.w	r2, #4294967295
 8002268:	601a      	str	r2, [r3, #0]
					break;
 800226a:	e03e      	b.n	80022ea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800226c:	4b30      	ldr	r3, [pc, #192]	; (8002330 <xTaskIncrementTick+0x14c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	429a      	cmp	r2, r3
 8002282:	d203      	bcs.n	800228c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002284:	4a2d      	ldr	r2, [pc, #180]	; (800233c <xTaskIncrementTick+0x158>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800228a:	e02e      	b.n	80022ea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	3304      	adds	r3, #4
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fcac 	bl	8001bee <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229a:	2b00      	cmp	r3, #0
 800229c:	d004      	beq.n	80022a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	3318      	adds	r3, #24
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fca3 	bl	8001bee <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ac:	2201      	movs	r2, #1
 80022ae:	409a      	lsls	r2, r3
 80022b0:	4b23      	ldr	r3, [pc, #140]	; (8002340 <xTaskIncrementTick+0x15c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	4a22      	ldr	r2, [pc, #136]	; (8002340 <xTaskIncrementTick+0x15c>)
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4a1f      	ldr	r2, [pc, #124]	; (8002344 <xTaskIncrementTick+0x160>)
 80022c8:	441a      	add	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	3304      	adds	r3, #4
 80022ce:	4619      	mov	r1, r3
 80022d0:	4610      	mov	r0, r2
 80022d2:	f7ff fc2f 	bl	8001b34 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022da:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <xTaskIncrementTick+0x164>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d3b9      	bcc.n	8002258 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80022e4:	2301      	movs	r3, #1
 80022e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022e8:	e7b6      	b.n	8002258 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80022ea:	4b17      	ldr	r3, [pc, #92]	; (8002348 <xTaskIncrementTick+0x164>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f0:	4914      	ldr	r1, [pc, #80]	; (8002344 <xTaskIncrementTick+0x160>)
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d901      	bls.n	8002306 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002302:	2301      	movs	r3, #1
 8002304:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <xTaskIncrementTick+0x168>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d007      	beq.n	800231e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800230e:	2301      	movs	r3, #1
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	e004      	b.n	800231e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002314:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <xTaskIncrementTick+0x16c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	3301      	adds	r3, #1
 800231a:	4a0d      	ldr	r2, [pc, #52]	; (8002350 <xTaskIncrementTick+0x16c>)
 800231c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800231e:	697b      	ldr	r3, [r7, #20]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	200003b4 	.word	0x200003b4
 800232c:	20000390 	.word	0x20000390
 8002330:	20000344 	.word	0x20000344
 8002334:	20000348 	.word	0x20000348
 8002338:	200003a4 	.word	0x200003a4
 800233c:	200003ac 	.word	0x200003ac
 8002340:	20000394 	.word	0x20000394
 8002344:	20000290 	.word	0x20000290
 8002348:	2000028c 	.word	0x2000028c
 800234c:	200003a0 	.word	0x200003a0
 8002350:	2000039c 	.word	0x2000039c

08002354 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002354:	b480      	push	{r7}
 8002356:	b087      	sub	sp, #28
 8002358:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800235a:	4b27      	ldr	r3, [pc, #156]	; (80023f8 <vTaskSwitchContext+0xa4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002362:	4b26      	ldr	r3, [pc, #152]	; (80023fc <vTaskSwitchContext+0xa8>)
 8002364:	2201      	movs	r2, #1
 8002366:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002368:	e03f      	b.n	80023ea <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800236a:	4b24      	ldr	r3, [pc, #144]	; (80023fc <vTaskSwitchContext+0xa8>)
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002370:	4b23      	ldr	r3, [pc, #140]	; (8002400 <vTaskSwitchContext+0xac>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	fab3 f383 	clz	r3, r3
 800237c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800237e:	7afb      	ldrb	r3, [r7, #11]
 8002380:	f1c3 031f 	rsb	r3, r3, #31
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	491f      	ldr	r1, [pc, #124]	; (8002404 <vTaskSwitchContext+0xb0>)
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	440b      	add	r3, r1
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10a      	bne.n	80023b0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800239a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239e:	f383 8811 	msr	BASEPRI, r3
 80023a2:	f3bf 8f6f 	isb	sy
 80023a6:	f3bf 8f4f 	dsb	sy
 80023aa:	607b      	str	r3, [r7, #4]
}
 80023ac:	bf00      	nop
 80023ae:	e7fe      	b.n	80023ae <vTaskSwitchContext+0x5a>
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4a12      	ldr	r2, [pc, #72]	; (8002404 <vTaskSwitchContext+0xb0>)
 80023bc:	4413      	add	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	3308      	adds	r3, #8
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d104      	bne.n	80023e0 <vTaskSwitchContext+0x8c>
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	605a      	str	r2, [r3, #4]
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	4a08      	ldr	r2, [pc, #32]	; (8002408 <vTaskSwitchContext+0xb4>)
 80023e8:	6013      	str	r3, [r2, #0]
}
 80023ea:	bf00      	nop
 80023ec:	371c      	adds	r7, #28
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	200003b4 	.word	0x200003b4
 80023fc:	200003a0 	.word	0x200003a0
 8002400:	20000394 	.word	0x20000394
 8002404:	20000290 	.word	0x20000290
 8002408:	2000028c 	.word	0x2000028c

0800240c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002414:	f000 f852 	bl	80024bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <prvIdleTask+0x28>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d9f9      	bls.n	8002414 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <prvIdleTask+0x2c>)
 8002422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	f3bf 8f4f 	dsb	sy
 800242c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002430:	e7f0      	b.n	8002414 <prvIdleTask+0x8>
 8002432:	bf00      	nop
 8002434:	20000290 	.word	0x20000290
 8002438:	e000ed04 	.word	0xe000ed04

0800243c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002442:	2300      	movs	r3, #0
 8002444:	607b      	str	r3, [r7, #4]
 8002446:	e00c      	b.n	8002462 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4a12      	ldr	r2, [pc, #72]	; (800249c <prvInitialiseTaskLists+0x60>)
 8002454:	4413      	add	r3, r2
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fb3f 	bl	8001ada <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3301      	adds	r3, #1
 8002460:	607b      	str	r3, [r7, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b06      	cmp	r3, #6
 8002466:	d9ef      	bls.n	8002448 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002468:	480d      	ldr	r0, [pc, #52]	; (80024a0 <prvInitialiseTaskLists+0x64>)
 800246a:	f7ff fb36 	bl	8001ada <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800246e:	480d      	ldr	r0, [pc, #52]	; (80024a4 <prvInitialiseTaskLists+0x68>)
 8002470:	f7ff fb33 	bl	8001ada <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002474:	480c      	ldr	r0, [pc, #48]	; (80024a8 <prvInitialiseTaskLists+0x6c>)
 8002476:	f7ff fb30 	bl	8001ada <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800247a:	480c      	ldr	r0, [pc, #48]	; (80024ac <prvInitialiseTaskLists+0x70>)
 800247c:	f7ff fb2d 	bl	8001ada <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002480:	480b      	ldr	r0, [pc, #44]	; (80024b0 <prvInitialiseTaskLists+0x74>)
 8002482:	f7ff fb2a 	bl	8001ada <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002486:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <prvInitialiseTaskLists+0x78>)
 8002488:	4a05      	ldr	r2, [pc, #20]	; (80024a0 <prvInitialiseTaskLists+0x64>)
 800248a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800248c:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <prvInitialiseTaskLists+0x7c>)
 800248e:	4a05      	ldr	r2, [pc, #20]	; (80024a4 <prvInitialiseTaskLists+0x68>)
 8002490:	601a      	str	r2, [r3, #0]
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000290 	.word	0x20000290
 80024a0:	2000031c 	.word	0x2000031c
 80024a4:	20000330 	.word	0x20000330
 80024a8:	2000034c 	.word	0x2000034c
 80024ac:	20000360 	.word	0x20000360
 80024b0:	20000378 	.word	0x20000378
 80024b4:	20000344 	.word	0x20000344
 80024b8:	20000348 	.word	0x20000348

080024bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80024c2:	e019      	b.n	80024f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80024c4:	f000 fa26 	bl	8002914 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024c8:	4b10      	ldr	r3, [pc, #64]	; (800250c <prvCheckTasksWaitingTermination+0x50>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3304      	adds	r3, #4
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fb8a 	bl	8001bee <uxListRemove>
				--uxCurrentNumberOfTasks;
 80024da:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <prvCheckTasksWaitingTermination+0x54>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	3b01      	subs	r3, #1
 80024e0:	4a0b      	ldr	r2, [pc, #44]	; (8002510 <prvCheckTasksWaitingTermination+0x54>)
 80024e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <prvCheckTasksWaitingTermination+0x58>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	3b01      	subs	r3, #1
 80024ea:	4a0a      	ldr	r2, [pc, #40]	; (8002514 <prvCheckTasksWaitingTermination+0x58>)
 80024ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80024ee:	f000 fa41 	bl	8002974 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f810 	bl	8002518 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <prvCheckTasksWaitingTermination+0x58>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1e1      	bne.n	80024c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002500:	bf00      	nop
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000360 	.word	0x20000360
 8002510:	2000038c 	.word	0x2000038c
 8002514:	20000374 	.word	0x20000374

08002518 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002526:	2b00      	cmp	r3, #0
 8002528:	d108      	bne.n	800253c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	4618      	mov	r0, r3
 8002530:	f000 fb9e 	bl	8002c70 <vPortFree>
				vPortFree( pxTCB );
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 fb9b 	bl	8002c70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800253a:	e018      	b.n	800256e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002542:	2b01      	cmp	r3, #1
 8002544:	d103      	bne.n	800254e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fb92 	bl	8002c70 <vPortFree>
	}
 800254c:	e00f      	b.n	800256e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002554:	2b02      	cmp	r3, #2
 8002556:	d00a      	beq.n	800256e <prvDeleteTCB+0x56>
	__asm volatile
 8002558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255c:	f383 8811 	msr	BASEPRI, r3
 8002560:	f3bf 8f6f 	isb	sy
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	60fb      	str	r3, [r7, #12]
}
 800256a:	bf00      	nop
 800256c:	e7fe      	b.n	800256c <prvDeleteTCB+0x54>
	}
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800257e:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <prvResetNextTaskUnblockTime+0x38>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d104      	bne.n	8002592 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002588:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <prvResetNextTaskUnblockTime+0x3c>)
 800258a:	f04f 32ff 	mov.w	r2, #4294967295
 800258e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002590:	e008      	b.n	80025a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002592:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <prvResetNextTaskUnblockTime+0x38>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	4a04      	ldr	r2, [pc, #16]	; (80025b4 <prvResetNextTaskUnblockTime+0x3c>)
 80025a2:	6013      	str	r3, [r2, #0]
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	20000344 	.word	0x20000344
 80025b4:	200003ac 	.word	0x200003ac

080025b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80025be:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <xTaskGetSchedulerState+0x34>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d102      	bne.n	80025cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80025c6:	2301      	movs	r3, #1
 80025c8:	607b      	str	r3, [r7, #4]
 80025ca:	e008      	b.n	80025de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <xTaskGetSchedulerState+0x38>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d102      	bne.n	80025da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80025d4:	2302      	movs	r3, #2
 80025d6:	607b      	str	r3, [r7, #4]
 80025d8:	e001      	b.n	80025de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80025da:	2300      	movs	r3, #0
 80025dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80025de:	687b      	ldr	r3, [r7, #4]
	}
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	20000398 	.word	0x20000398
 80025f0:	200003b4 	.word	0x200003b4

080025f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80025fe:	4b29      	ldr	r3, [pc, #164]	; (80026a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002604:	4b28      	ldr	r3, [pc, #160]	; (80026a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	3304      	adds	r3, #4
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff faef 	bl	8001bee <uxListRemove>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10b      	bne.n	800262e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002616:	4b24      	ldr	r3, [pc, #144]	; (80026a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	2201      	movs	r2, #1
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43da      	mvns	r2, r3
 8002624:	4b21      	ldr	r3, [pc, #132]	; (80026ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4013      	ands	r3, r2
 800262a:	4a20      	ldr	r2, [pc, #128]	; (80026ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800262c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002634:	d10a      	bne.n	800264c <prvAddCurrentTaskToDelayedList+0x58>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d007      	beq.n	800264c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800263c:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	3304      	adds	r3, #4
 8002642:	4619      	mov	r1, r3
 8002644:	481a      	ldr	r0, [pc, #104]	; (80026b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002646:	f7ff fa75 	bl	8001b34 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800264a:	e026      	b.n	800269a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002654:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	429a      	cmp	r2, r3
 8002662:	d209      	bcs.n	8002678 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002664:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	3304      	adds	r3, #4
 800266e:	4619      	mov	r1, r3
 8002670:	4610      	mov	r0, r2
 8002672:	f7ff fa83 	bl	8001b7c <vListInsert>
}
 8002676:	e010      	b.n	800269a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002678:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	3304      	adds	r3, #4
 8002682:	4619      	mov	r1, r3
 8002684:	4610      	mov	r0, r2
 8002686:	f7ff fa79 	bl	8001b7c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800268a:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	429a      	cmp	r2, r3
 8002692:	d202      	bcs.n	800269a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002694:	4a09      	ldr	r2, [pc, #36]	; (80026bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	6013      	str	r3, [r2, #0]
}
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000390 	.word	0x20000390
 80026a8:	2000028c 	.word	0x2000028c
 80026ac:	20000394 	.word	0x20000394
 80026b0:	20000378 	.word	0x20000378
 80026b4:	20000348 	.word	0x20000348
 80026b8:	20000344 	.word	0x20000344
 80026bc:	200003ac 	.word	0x200003ac

080026c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	3b04      	subs	r3, #4
 80026d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	3b04      	subs	r3, #4
 80026de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f023 0201 	bic.w	r2, r3, #1
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	3b04      	subs	r3, #4
 80026ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80026f0:	4a0c      	ldr	r2, [pc, #48]	; (8002724 <pxPortInitialiseStack+0x64>)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	3b14      	subs	r3, #20
 80026fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3b04      	subs	r3, #4
 8002706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f06f 0202 	mvn.w	r2, #2
 800270e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	3b20      	subs	r3, #32
 8002714:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002716:	68fb      	ldr	r3, [r7, #12]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	08002729 	.word	0x08002729

08002728 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002732:	4b12      	ldr	r3, [pc, #72]	; (800277c <prvTaskExitError+0x54>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273a:	d00a      	beq.n	8002752 <prvTaskExitError+0x2a>
	__asm volatile
 800273c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002740:	f383 8811 	msr	BASEPRI, r3
 8002744:	f3bf 8f6f 	isb	sy
 8002748:	f3bf 8f4f 	dsb	sy
 800274c:	60fb      	str	r3, [r7, #12]
}
 800274e:	bf00      	nop
 8002750:	e7fe      	b.n	8002750 <prvTaskExitError+0x28>
	__asm volatile
 8002752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002756:	f383 8811 	msr	BASEPRI, r3
 800275a:	f3bf 8f6f 	isb	sy
 800275e:	f3bf 8f4f 	dsb	sy
 8002762:	60bb      	str	r3, [r7, #8]
}
 8002764:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002766:	bf00      	nop
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0fc      	beq.n	8002768 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800276e:	bf00      	nop
 8002770:	bf00      	nop
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	2000000c 	.word	0x2000000c

08002780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002780:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <pxCurrentTCBConst2>)
 8002782:	6819      	ldr	r1, [r3, #0]
 8002784:	6808      	ldr	r0, [r1, #0]
 8002786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800278a:	f380 8809 	msr	PSP, r0
 800278e:	f3bf 8f6f 	isb	sy
 8002792:	f04f 0000 	mov.w	r0, #0
 8002796:	f380 8811 	msr	BASEPRI, r0
 800279a:	4770      	bx	lr
 800279c:	f3af 8000 	nop.w

080027a0 <pxCurrentTCBConst2>:
 80027a0:	2000028c 	.word	0x2000028c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80027a4:	bf00      	nop
 80027a6:	bf00      	nop

080027a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80027a8:	4808      	ldr	r0, [pc, #32]	; (80027cc <prvPortStartFirstTask+0x24>)
 80027aa:	6800      	ldr	r0, [r0, #0]
 80027ac:	6800      	ldr	r0, [r0, #0]
 80027ae:	f380 8808 	msr	MSP, r0
 80027b2:	f04f 0000 	mov.w	r0, #0
 80027b6:	f380 8814 	msr	CONTROL, r0
 80027ba:	b662      	cpsie	i
 80027bc:	b661      	cpsie	f
 80027be:	f3bf 8f4f 	dsb	sy
 80027c2:	f3bf 8f6f 	isb	sy
 80027c6:	df00      	svc	0
 80027c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80027ca:	bf00      	nop
 80027cc:	e000ed08 	.word	0xe000ed08

080027d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80027d6:	4b46      	ldr	r3, [pc, #280]	; (80028f0 <xPortStartScheduler+0x120>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a46      	ldr	r2, [pc, #280]	; (80028f4 <xPortStartScheduler+0x124>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d10a      	bne.n	80027f6 <xPortStartScheduler+0x26>
	__asm volatile
 80027e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e4:	f383 8811 	msr	BASEPRI, r3
 80027e8:	f3bf 8f6f 	isb	sy
 80027ec:	f3bf 8f4f 	dsb	sy
 80027f0:	613b      	str	r3, [r7, #16]
}
 80027f2:	bf00      	nop
 80027f4:	e7fe      	b.n	80027f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80027f6:	4b3e      	ldr	r3, [pc, #248]	; (80028f0 <xPortStartScheduler+0x120>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a3f      	ldr	r2, [pc, #252]	; (80028f8 <xPortStartScheduler+0x128>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d10a      	bne.n	8002816 <xPortStartScheduler+0x46>
	__asm volatile
 8002800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	60fb      	str	r3, [r7, #12]
}
 8002812:	bf00      	nop
 8002814:	e7fe      	b.n	8002814 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002816:	4b39      	ldr	r3, [pc, #228]	; (80028fc <xPortStartScheduler+0x12c>)
 8002818:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	b2db      	uxtb	r3, r3
 8002820:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	22ff      	movs	r2, #255	; 0xff
 8002826:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002830:	78fb      	ldrb	r3, [r7, #3]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002838:	b2da      	uxtb	r2, r3
 800283a:	4b31      	ldr	r3, [pc, #196]	; (8002900 <xPortStartScheduler+0x130>)
 800283c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800283e:	4b31      	ldr	r3, [pc, #196]	; (8002904 <xPortStartScheduler+0x134>)
 8002840:	2207      	movs	r2, #7
 8002842:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002844:	e009      	b.n	800285a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002846:	4b2f      	ldr	r3, [pc, #188]	; (8002904 <xPortStartScheduler+0x134>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	3b01      	subs	r3, #1
 800284c:	4a2d      	ldr	r2, [pc, #180]	; (8002904 <xPortStartScheduler+0x134>)
 800284e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	b2db      	uxtb	r3, r3
 8002858:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800285a:	78fb      	ldrb	r3, [r7, #3]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002862:	2b80      	cmp	r3, #128	; 0x80
 8002864:	d0ef      	beq.n	8002846 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002866:	4b27      	ldr	r3, [pc, #156]	; (8002904 <xPortStartScheduler+0x134>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f1c3 0307 	rsb	r3, r3, #7
 800286e:	2b04      	cmp	r3, #4
 8002870:	d00a      	beq.n	8002888 <xPortStartScheduler+0xb8>
	__asm volatile
 8002872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002876:	f383 8811 	msr	BASEPRI, r3
 800287a:	f3bf 8f6f 	isb	sy
 800287e:	f3bf 8f4f 	dsb	sy
 8002882:	60bb      	str	r3, [r7, #8]
}
 8002884:	bf00      	nop
 8002886:	e7fe      	b.n	8002886 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002888:	4b1e      	ldr	r3, [pc, #120]	; (8002904 <xPortStartScheduler+0x134>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	021b      	lsls	r3, r3, #8
 800288e:	4a1d      	ldr	r2, [pc, #116]	; (8002904 <xPortStartScheduler+0x134>)
 8002890:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002892:	4b1c      	ldr	r3, [pc, #112]	; (8002904 <xPortStartScheduler+0x134>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800289a:	4a1a      	ldr	r2, [pc, #104]	; (8002904 <xPortStartScheduler+0x134>)
 800289c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80028a6:	4b18      	ldr	r3, [pc, #96]	; (8002908 <xPortStartScheduler+0x138>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a17      	ldr	r2, [pc, #92]	; (8002908 <xPortStartScheduler+0x138>)
 80028ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <xPortStartScheduler+0x138>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a14      	ldr	r2, [pc, #80]	; (8002908 <xPortStartScheduler+0x138>)
 80028b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80028bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80028be:	f000 f8dd 	bl	8002a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80028c2:	4b12      	ldr	r3, [pc, #72]	; (800290c <xPortStartScheduler+0x13c>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80028c8:	f000 f8fc 	bl	8002ac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80028cc:	4b10      	ldr	r3, [pc, #64]	; (8002910 <xPortStartScheduler+0x140>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a0f      	ldr	r2, [pc, #60]	; (8002910 <xPortStartScheduler+0x140>)
 80028d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80028d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80028d8:	f7ff ff66 	bl	80027a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80028dc:	f7ff fd3a 	bl	8002354 <vTaskSwitchContext>
	prvTaskExitError();
 80028e0:	f7ff ff22 	bl	8002728 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	e000ed00 	.word	0xe000ed00
 80028f4:	410fc271 	.word	0x410fc271
 80028f8:	410fc270 	.word	0x410fc270
 80028fc:	e000e400 	.word	0xe000e400
 8002900:	200003b8 	.word	0x200003b8
 8002904:	200003bc 	.word	0x200003bc
 8002908:	e000ed20 	.word	0xe000ed20
 800290c:	2000000c 	.word	0x2000000c
 8002910:	e000ef34 	.word	0xe000ef34

08002914 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
	__asm volatile
 800291a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291e:	f383 8811 	msr	BASEPRI, r3
 8002922:	f3bf 8f6f 	isb	sy
 8002926:	f3bf 8f4f 	dsb	sy
 800292a:	607b      	str	r3, [r7, #4]
}
 800292c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800292e:	4b0f      	ldr	r3, [pc, #60]	; (800296c <vPortEnterCritical+0x58>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	3301      	adds	r3, #1
 8002934:	4a0d      	ldr	r2, [pc, #52]	; (800296c <vPortEnterCritical+0x58>)
 8002936:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <vPortEnterCritical+0x58>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d10f      	bne.n	8002960 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <vPortEnterCritical+0x5c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <vPortEnterCritical+0x4c>
	__asm volatile
 800294a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294e:	f383 8811 	msr	BASEPRI, r3
 8002952:	f3bf 8f6f 	isb	sy
 8002956:	f3bf 8f4f 	dsb	sy
 800295a:	603b      	str	r3, [r7, #0]
}
 800295c:	bf00      	nop
 800295e:	e7fe      	b.n	800295e <vPortEnterCritical+0x4a>
	}
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	2000000c 	.word	0x2000000c
 8002970:	e000ed04 	.word	0xe000ed04

08002974 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800297a:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <vPortExitCritical+0x50>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10a      	bne.n	8002998 <vPortExitCritical+0x24>
	__asm volatile
 8002982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002986:	f383 8811 	msr	BASEPRI, r3
 800298a:	f3bf 8f6f 	isb	sy
 800298e:	f3bf 8f4f 	dsb	sy
 8002992:	607b      	str	r3, [r7, #4]
}
 8002994:	bf00      	nop
 8002996:	e7fe      	b.n	8002996 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002998:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <vPortExitCritical+0x50>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	3b01      	subs	r3, #1
 800299e:	4a09      	ldr	r2, [pc, #36]	; (80029c4 <vPortExitCritical+0x50>)
 80029a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80029a2:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <vPortExitCritical+0x50>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d105      	bne.n	80029b6 <vPortExitCritical+0x42>
 80029aa:	2300      	movs	r3, #0
 80029ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80029b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	2000000c 	.word	0x2000000c
	...

080029d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80029d0:	f3ef 8009 	mrs	r0, PSP
 80029d4:	f3bf 8f6f 	isb	sy
 80029d8:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <pxCurrentTCBConst>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	f01e 0f10 	tst.w	lr, #16
 80029e0:	bf08      	it	eq
 80029e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80029e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029ea:	6010      	str	r0, [r2, #0]
 80029ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80029f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80029f4:	f380 8811 	msr	BASEPRI, r0
 80029f8:	f3bf 8f4f 	dsb	sy
 80029fc:	f3bf 8f6f 	isb	sy
 8002a00:	f7ff fca8 	bl	8002354 <vTaskSwitchContext>
 8002a04:	f04f 0000 	mov.w	r0, #0
 8002a08:	f380 8811 	msr	BASEPRI, r0
 8002a0c:	bc09      	pop	{r0, r3}
 8002a0e:	6819      	ldr	r1, [r3, #0]
 8002a10:	6808      	ldr	r0, [r1, #0]
 8002a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a16:	f01e 0f10 	tst.w	lr, #16
 8002a1a:	bf08      	it	eq
 8002a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002a20:	f380 8809 	msr	PSP, r0
 8002a24:	f3bf 8f6f 	isb	sy
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	f3af 8000 	nop.w

08002a30 <pxCurrentTCBConst>:
 8002a30:	2000028c 	.word	0x2000028c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop

08002a38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8002a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a42:	f383 8811 	msr	BASEPRI, r3
 8002a46:	f3bf 8f6f 	isb	sy
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	607b      	str	r3, [r7, #4]
}
 8002a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002a52:	f7ff fbc7 	bl	80021e4 <xTaskIncrementTick>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <xPortSysTickHandler+0x40>)
 8002a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	2300      	movs	r3, #0
 8002a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	f383 8811 	msr	BASEPRI, r3
}
 8002a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002a70:	bf00      	nop
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	e000ed04 	.word	0xe000ed04

08002a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <vPortSetupTimerInterrupt+0x34>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002a86:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <vPortSetupTimerInterrupt+0x38>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <vPortSetupTimerInterrupt+0x3c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <vPortSetupTimerInterrupt+0x40>)
 8002a92:	fba2 2303 	umull	r2, r3, r2, r3
 8002a96:	099b      	lsrs	r3, r3, #6
 8002a98:	4a09      	ldr	r2, [pc, #36]	; (8002ac0 <vPortSetupTimerInterrupt+0x44>)
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002a9e:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <vPortSetupTimerInterrupt+0x34>)
 8002aa0:	2207      	movs	r2, #7
 8002aa2:	601a      	str	r2, [r3, #0]
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	e000e010 	.word	0xe000e010
 8002ab4:	e000e018 	.word	0xe000e018
 8002ab8:	20000000 	.word	0x20000000
 8002abc:	10624dd3 	.word	0x10624dd3
 8002ac0:	e000e014 	.word	0xe000e014

08002ac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002ac4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002ad4 <vPortEnableVFP+0x10>
 8002ac8:	6801      	ldr	r1, [r0, #0]
 8002aca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002ace:	6001      	str	r1, [r0, #0]
 8002ad0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002ad2:	bf00      	nop
 8002ad4:	e000ed88 	.word	0xe000ed88

08002ad8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08a      	sub	sp, #40	; 0x28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002ae4:	f7ff fad4 	bl	8002090 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002ae8:	4b5b      	ldr	r3, [pc, #364]	; (8002c58 <pvPortMalloc+0x180>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002af0:	f000 f920 	bl	8002d34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002af4:	4b59      	ldr	r3, [pc, #356]	; (8002c5c <pvPortMalloc+0x184>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f040 8093 	bne.w	8002c28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d01d      	beq.n	8002b44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002b08:	2208      	movs	r2, #8
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d014      	beq.n	8002b44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f023 0307 	bic.w	r3, r3, #7
 8002b20:	3308      	adds	r3, #8
 8002b22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <pvPortMalloc+0x6c>
	__asm volatile
 8002b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b32:	f383 8811 	msr	BASEPRI, r3
 8002b36:	f3bf 8f6f 	isb	sy
 8002b3a:	f3bf 8f4f 	dsb	sy
 8002b3e:	617b      	str	r3, [r7, #20]
}
 8002b40:	bf00      	nop
 8002b42:	e7fe      	b.n	8002b42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d06e      	beq.n	8002c28 <pvPortMalloc+0x150>
 8002b4a:	4b45      	ldr	r3, [pc, #276]	; (8002c60 <pvPortMalloc+0x188>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d869      	bhi.n	8002c28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002b54:	4b43      	ldr	r3, [pc, #268]	; (8002c64 <pvPortMalloc+0x18c>)
 8002b56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002b58:	4b42      	ldr	r3, [pc, #264]	; (8002c64 <pvPortMalloc+0x18c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b5e:	e004      	b.n	8002b6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d903      	bls.n	8002b7c <pvPortMalloc+0xa4>
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1f1      	bne.n	8002b60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002b7c:	4b36      	ldr	r3, [pc, #216]	; (8002c58 <pvPortMalloc+0x180>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d050      	beq.n	8002c28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2208      	movs	r2, #8
 8002b8c:	4413      	add	r3, r2
 8002b8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	1ad2      	subs	r2, r2, r3
 8002ba0:	2308      	movs	r3, #8
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d91f      	bls.n	8002be8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4413      	add	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <pvPortMalloc+0xf8>
	__asm volatile
 8002bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bbe:	f383 8811 	msr	BASEPRI, r3
 8002bc2:	f3bf 8f6f 	isb	sy
 8002bc6:	f3bf 8f4f 	dsb	sy
 8002bca:	613b      	str	r3, [r7, #16]
}
 8002bcc:	bf00      	nop
 8002bce:	e7fe      	b.n	8002bce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	1ad2      	subs	r2, r2, r3
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002be2:	69b8      	ldr	r0, [r7, #24]
 8002be4:	f000 f908 	bl	8002df8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002be8:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <pvPortMalloc+0x188>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	4a1b      	ldr	r2, [pc, #108]	; (8002c60 <pvPortMalloc+0x188>)
 8002bf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002bf6:	4b1a      	ldr	r3, [pc, #104]	; (8002c60 <pvPortMalloc+0x188>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <pvPortMalloc+0x190>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d203      	bcs.n	8002c0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002c02:	4b17      	ldr	r3, [pc, #92]	; (8002c60 <pvPortMalloc+0x188>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a18      	ldr	r2, [pc, #96]	; (8002c68 <pvPortMalloc+0x190>)
 8002c08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <pvPortMalloc+0x184>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	431a      	orrs	r2, r3
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002c1e:	4b13      	ldr	r3, [pc, #76]	; (8002c6c <pvPortMalloc+0x194>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	3301      	adds	r3, #1
 8002c24:	4a11      	ldr	r2, [pc, #68]	; (8002c6c <pvPortMalloc+0x194>)
 8002c26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002c28:	f7ff fa40 	bl	80020ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00a      	beq.n	8002c4c <pvPortMalloc+0x174>
	__asm volatile
 8002c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3a:	f383 8811 	msr	BASEPRI, r3
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	60fb      	str	r3, [r7, #12]
}
 8002c48:	bf00      	nop
 8002c4a:	e7fe      	b.n	8002c4a <pvPortMalloc+0x172>
	return pvReturn;
 8002c4c:	69fb      	ldr	r3, [r7, #28]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3728      	adds	r7, #40	; 0x28
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20003fc8 	.word	0x20003fc8
 8002c5c:	20003fdc 	.word	0x20003fdc
 8002c60:	20003fcc 	.word	0x20003fcc
 8002c64:	20003fc0 	.word	0x20003fc0
 8002c68:	20003fd0 	.word	0x20003fd0
 8002c6c:	20003fd4 	.word	0x20003fd4

08002c70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d04d      	beq.n	8002d1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002c82:	2308      	movs	r3, #8
 8002c84:	425b      	negs	r3, r3
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	4413      	add	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	4b24      	ldr	r3, [pc, #144]	; (8002d28 <vPortFree+0xb8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10a      	bne.n	8002cb4 <vPortFree+0x44>
	__asm volatile
 8002c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca2:	f383 8811 	msr	BASEPRI, r3
 8002ca6:	f3bf 8f6f 	isb	sy
 8002caa:	f3bf 8f4f 	dsb	sy
 8002cae:	60fb      	str	r3, [r7, #12]
}
 8002cb0:	bf00      	nop
 8002cb2:	e7fe      	b.n	8002cb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00a      	beq.n	8002cd2 <vPortFree+0x62>
	__asm volatile
 8002cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc0:	f383 8811 	msr	BASEPRI, r3
 8002cc4:	f3bf 8f6f 	isb	sy
 8002cc8:	f3bf 8f4f 	dsb	sy
 8002ccc:	60bb      	str	r3, [r7, #8]
}
 8002cce:	bf00      	nop
 8002cd0:	e7fe      	b.n	8002cd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <vPortFree+0xb8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d01e      	beq.n	8002d1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d11a      	bne.n	8002d1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <vPortFree+0xb8>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	401a      	ands	r2, r3
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002cf8:	f7ff f9ca 	bl	8002090 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <vPortFree+0xbc>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4413      	add	r3, r2
 8002d06:	4a09      	ldr	r2, [pc, #36]	; (8002d2c <vPortFree+0xbc>)
 8002d08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002d0a:	6938      	ldr	r0, [r7, #16]
 8002d0c:	f000 f874 	bl	8002df8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002d10:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <vPortFree+0xc0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	3301      	adds	r3, #1
 8002d16:	4a06      	ldr	r2, [pc, #24]	; (8002d30 <vPortFree+0xc0>)
 8002d18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002d1a:	f7ff f9c7 	bl	80020ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002d1e:	bf00      	nop
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20003fdc 	.word	0x20003fdc
 8002d2c:	20003fcc 	.word	0x20003fcc
 8002d30:	20003fd8 	.word	0x20003fd8

08002d34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002d3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002d3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002d40:	4b27      	ldr	r3, [pc, #156]	; (8002de0 <prvHeapInit+0xac>)
 8002d42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00c      	beq.n	8002d68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	3307      	adds	r3, #7
 8002d52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f023 0307 	bic.w	r3, r3, #7
 8002d5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	4a1f      	ldr	r2, [pc, #124]	; (8002de0 <prvHeapInit+0xac>)
 8002d64:	4413      	add	r3, r2
 8002d66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002d6c:	4a1d      	ldr	r2, [pc, #116]	; (8002de4 <prvHeapInit+0xb0>)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002d72:	4b1c      	ldr	r3, [pc, #112]	; (8002de4 <prvHeapInit+0xb0>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002d80:	2208      	movs	r2, #8
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1a9b      	subs	r3, r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f023 0307 	bic.w	r3, r3, #7
 8002d8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4a15      	ldr	r2, [pc, #84]	; (8002de8 <prvHeapInit+0xb4>)
 8002d94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002d96:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <prvHeapInit+0xb4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002d9e:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <prvHeapInit+0xb4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	1ad2      	subs	r2, r2, r3
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002db4:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <prvHeapInit+0xb4>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4a0a      	ldr	r2, [pc, #40]	; (8002dec <prvHeapInit+0xb8>)
 8002dc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	4a09      	ldr	r2, [pc, #36]	; (8002df0 <prvHeapInit+0xbc>)
 8002dca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002dcc:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <prvHeapInit+0xc0>)
 8002dce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002dd2:	601a      	str	r2, [r3, #0]
}
 8002dd4:	bf00      	nop
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	200003c0 	.word	0x200003c0
 8002de4:	20003fc0 	.word	0x20003fc0
 8002de8:	20003fc8 	.word	0x20003fc8
 8002dec:	20003fd0 	.word	0x20003fd0
 8002df0:	20003fcc 	.word	0x20003fcc
 8002df4:	20003fdc 	.word	0x20003fdc

08002df8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002e00:	4b28      	ldr	r3, [pc, #160]	; (8002ea4 <prvInsertBlockIntoFreeList+0xac>)
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	e002      	b.n	8002e0c <prvInsertBlockIntoFreeList+0x14>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d8f7      	bhi.n	8002e06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	4413      	add	r3, r2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d108      	bne.n	8002e3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	441a      	add	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	441a      	add	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d118      	bne.n	8002e80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d00d      	beq.n	8002e76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	441a      	add	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	e008      	b.n	8002e88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002e76:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	e003      	b.n	8002e88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d002      	beq.n	8002e96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e96:	bf00      	nop
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	20003fc0 	.word	0x20003fc0
 8002ea8:	20003fc8 	.word	0x20003fc8

08002eac <__libc_init_array>:
 8002eac:	b570      	push	{r4, r5, r6, lr}
 8002eae:	4d0d      	ldr	r5, [pc, #52]	; (8002ee4 <__libc_init_array+0x38>)
 8002eb0:	4c0d      	ldr	r4, [pc, #52]	; (8002ee8 <__libc_init_array+0x3c>)
 8002eb2:	1b64      	subs	r4, r4, r5
 8002eb4:	10a4      	asrs	r4, r4, #2
 8002eb6:	2600      	movs	r6, #0
 8002eb8:	42a6      	cmp	r6, r4
 8002eba:	d109      	bne.n	8002ed0 <__libc_init_array+0x24>
 8002ebc:	4d0b      	ldr	r5, [pc, #44]	; (8002eec <__libc_init_array+0x40>)
 8002ebe:	4c0c      	ldr	r4, [pc, #48]	; (8002ef0 <__libc_init_array+0x44>)
 8002ec0:	f000 f820 	bl	8002f04 <_init>
 8002ec4:	1b64      	subs	r4, r4, r5
 8002ec6:	10a4      	asrs	r4, r4, #2
 8002ec8:	2600      	movs	r6, #0
 8002eca:	42a6      	cmp	r6, r4
 8002ecc:	d105      	bne.n	8002eda <__libc_init_array+0x2e>
 8002ece:	bd70      	pop	{r4, r5, r6, pc}
 8002ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ed4:	4798      	blx	r3
 8002ed6:	3601      	adds	r6, #1
 8002ed8:	e7ee      	b.n	8002eb8 <__libc_init_array+0xc>
 8002eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ede:	4798      	blx	r3
 8002ee0:	3601      	adds	r6, #1
 8002ee2:	e7f2      	b.n	8002eca <__libc_init_array+0x1e>
 8002ee4:	08002f8c 	.word	0x08002f8c
 8002ee8:	08002f8c 	.word	0x08002f8c
 8002eec:	08002f8c 	.word	0x08002f8c
 8002ef0:	08002f90 	.word	0x08002f90

08002ef4 <memset>:
 8002ef4:	4402      	add	r2, r0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d100      	bne.n	8002efe <memset+0xa>
 8002efc:	4770      	bx	lr
 8002efe:	f803 1b01 	strb.w	r1, [r3], #1
 8002f02:	e7f9      	b.n	8002ef8 <memset+0x4>

08002f04 <_init>:
 8002f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f06:	bf00      	nop
 8002f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f0a:	bc08      	pop	{r3}
 8002f0c:	469e      	mov	lr, r3
 8002f0e:	4770      	bx	lr

08002f10 <_fini>:
 8002f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f12:	bf00      	nop
 8002f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f16:	bc08      	pop	{r3}
 8002f18:	469e      	mov	lr, r3
 8002f1a:	4770      	bx	lr
